as.factor(US_Dummy))]
stargazer(mod_task3_a,
mod_task3_b,
# mod_task3_c,
mod_task3_d,
se = list(get_robust_se(mod_task3_a),
get_robust_se(mod_task3_b),
# get_robust_se(mod_task3_c),
get_robust_se(mod_task3_d)),
omit = c("Education_Level","Age_Range"),
add.lines = list(c('Education FE', 'No','Yes','Yes'),
c('Age FE','No','Yes','Yes')),
order = c(1,2,3,4,5),
covariate.labels = c('Any Feedback','Medical Feedback','Negative Images','Positive Images','Self-Reflect','Task Phase 1 Score','Male','US'),
omit.stat=c("ser","f"),
dep.var.labels = 'Task Phase 3 Score',
no.space=TRUE,
header=FALSE,
label = 'model3',
type='latex')
pander(anova(mod_task3_b, mod_task3_d, test='F'),style='rmarkdown')
d <- fread('../check-valid-responses/data/qualtrics_results_final.csv')
d <-
d[(Status == "IP Address"),] #& (Finished == 'True'),]
# These WorkerId put in all 1 response (all Normal or all Pneumonia)
# These people just gave alternating responses (Normal, Pneumonia, Normal,...,Pneumonia)
d_respondents_noncompliers <-
d[Q80 %in% c(
"A32K1M0A36EAK5",
"A3I700VG8POSWH",
"A3EPIT2P3ISA3K",
"A390TP4DJI9P9W",
"A3EPIT2P3ISA3K",
"AUFLTHQAXWLH1",
"AMZ1NNF182G8V",
"A3BG20JPQLNKE1",
"AVINXZZV3FNG7",
"A3D4CITR1C9L3W",
"A1BUYK6LXYWMLL",
"A1FHRZXSE7XNJ4",
"A12NQJV6TA5OWB",
"AGCQCHHAQVA6R",
"A119EX2L0DNN1B",
"A3BPENSX5EVJ2H",
"A371SNJNNUY9Z6",
"A33YPBYXXZP3HY",
"A3NYIJYBHAJ74V",
"A2NGFU82LMJ80X",
"A2J016DRTOBXWO",
"A2GSZ3D2XXC533",
"A2IGIOD74EPOEF",
"A18WFPSLFV4FKY",
"A1GMYDH5MKN105",
"A8H1AW1NWPMAJ",
"A39AAWF3F8OM6Q",
"A26399B1QZ7XJJ",
"A1NA92R0YGX32U",
"A30UB0NUUWB3RM",
"A16JX1MOPDCYDN",
"A16X5FB3HAFCKN",
"A211KGJ94WNFLN",
"A1PGY59BR6C5BX",
"AG5RF4UGQJ7A7",
"A13T1DZG02HLNL",
"A1WUFHQ1YGHK3C",
"A1GNPQ5LM6YY5I",
"A3EZ0H07TSDAPW",
"ADLZLGHKOAEE6",
"A1CF1W8CP0DHB0",
"A3VP14XN3WUUOC",
"A7VQQEIBSM9IU",
"A8DER1QY96C5X",
"A1M8MNKK8H5ZGW",
"A1J3ICF1NZYFCR",
"A34D5D6PU193AR"), ]
#get rid of duplicate responses
d_respondents_noncompliers <- d_respondents_noncompliers[duplicated(d_respondents_noncompliers, by = "Q80") == FALSE, ]
#rename task phase questions
setnames(d_respondents_noncompliers,
old = c('Q2', 'Q42'),
new = c('Self_Reflect_Q1', 'Self_Reflect_Q2'))
setnames(d_respondents_noncompliers,
old = c('Q69', 'Q89'),
new = c('Control_Q1', 'Control_Q2'))
setnames(d_respondents_noncompliers,
old = c('Q80', 'Q82', 'Q83', 'Q84', 'SC0', 'FL_6_DO'),
new = c('Amazon_Turk_ID', 'Gender', 'Age_Range', 'Education_Level', 'Total_Score', 'Assignment'))
setnames(d_respondents_noncompliers,
old = c('Q1', 'Q5', 'Q6', 'Q7', 'Q16', 'Q17', 'Q18', 'Q19', 'Q20', 'Q21',
'Q8', 'Q9', 'Q10', 'Q11', 'Q22', 'Q23', 'Q24', 'Q25', 'Q26', 'Q27',
'Q12', 'Q13', 'Q14', 'Q15', 'Q28', 'Q29', 'Q30', 'Q31', 'Q32', 'Q33'),
new = c('Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7', 'Q8', 'Q9', 'Q10',
'Q11', 'Q12', 'Q13', 'Q14', 'Q15', 'Q16', 'Q17', 'Q18', 'Q19', 'Q20',
'Q21', 'Q22', 'Q23', 'Q24', 'Q25', 'Q26', 'Q27', 'Q28', 'Q29', 'Q30'))
d_respondents_noncompliers[ , c("Q1_Score", "Q2_Score", "Q3_Score", "Q4_Score", "Q5_Score",
"Q6_Score", "Q7_Score", "Q8_Score", "Q9_Score", "Q10_Score",
"Q11_Score", "Q12_Score", "Q13_Score", "Q14_Score", "Q15_Score",
"Q16_Score", "Q17_Score", "Q18_Score", "Q19_Score", "Q20_Score",
"Q21_Score", "Q22_Score", "Q23_Score", "Q24_Score", "Q25_Score", "Q26_Score",
"Q27_Score", "Q28_Score", "Q29_Score", "Q30_Score") :=
list(ifelse(Q1 == "Normal", 1, 0),
ifelse(Q2 == "Normal", 1, 0),
ifelse(Q3 == "Pneumonia", 1, 0),
ifelse(Q4 == "Pneumonia", 1, 0),
ifelse(Q5 == "Normal", 1, 0),
ifelse(Q6 == "Pneumonia", 1, 0),
ifelse(Q7 == "Pneumonia", 1, 0),
ifelse(Q8 == "Normal", 1, 0),
ifelse(Q9 == "Pneumonia", 1, 0),
ifelse(Q10 == "Normal", 1, 0),
ifelse(Q11 == "Pneumonia", 1, 0),
ifelse(Q12 == "Normal", 1, 0),
ifelse(Q13 == "Pneumonia", 1, 0),
ifelse(Q14 == "Pneumonia", 1, 0),
ifelse(Q15 == "Normal", 1, 0),
ifelse(Q16 == "Normal", 1, 0),
ifelse(Q17 == "Pneumonia", 1, 0),
ifelse(Q18 == "Normal", 1, 0),
ifelse(Q19 == "Pneumonia", 1, 0),
ifelse(Q20 == "Normal", 1, 0),
ifelse(Q21 == "Normal", 1, 0),
ifelse(Q22 == "Normal", 1, 0),
ifelse(Q23 == "Pneumonia", 1, 0),
ifelse(Q24 == "Normal", 1, 0),
ifelse(Q25 == "Pneumonia", 1, 0),
ifelse(Q26 == "Pneumonia", 1, 0),
ifelse(Q27 == "Pneumonia", 1, 0),
ifelse(Q28 == "Pneumonia", 1, 0),
ifelse(Q29 == "Normal", 1, 0),
ifelse(Q30 == "Normal", 1, 0))]
d_respondents_noncompliers[ , Assignment_Group := ifelse(Assignment == "FL_17", "Control",
ifelse(Assignment == "FL_14", "Self-Reflect",
ifelse(Assignment == "FL_15", "Medical Feedback",
ifelse(Assignment == "FL_16", "Positive Images", "Negative Images"))))]
d_respondents_noncompliers[ , c("TaskPhase1_Score", "TaskPhase2_Score", "TaskPhase3_Score") :=
list(sum(Q1_Score, Q2_Score, Q3_Score, Q4_Score, Q5_Score, Q6_Score,
Q7_Score, Q8_Score, Q9_Score, Q10_Score)/10,
sum(Q11_Score, Q12_Score, Q13_Score, Q14_Score, Q15_Score, Q16_Score,
Q17_Score, Q18_Score, Q19_Score, Q20_Score)/10,
sum(Q21_Score, Q22_Score, Q23_Score, Q24_Score, Q25_Score, Q26_Score,
Q27_Score, Q28_Score, Q29_Score, Q30_Score)/10),
by = Amazon_Turk_ID]
### setting up compliers by adding complier dummy variable (Based on d_respondents)
d_respondents_compliers <- d_respondents[, c("housenumber","street","city",
"county","state","zip","country",
"US_Dummy"):=NULL]
d_respondents_compliers[ , Complier_Dummy := 1]
### add complier dummy for noncompliers data table
d_respondents_noncompliers[ , Treatment_Dummy := ifelse(Assignment_Group != "Control", 1, 0)]
d_respondents_noncompliers[ , Complier_Dummy := 0]
### merge compliers and noncompliers data tables: 350 + 44 = 394
d_merge_respondents_noncompliers_compliers <- rbind(d_respondents_compliers, d_respondents_noncompliers, fill=TRUE)
##############
#### Take-Up Rates for Medical Feedback
total_MedFeedback_compliers <- nrow(d_merge_respondents_noncompliers_compliers[ Assignment_Group=="Medical Feedback" & Complier_Dummy==1, ])
total_MedFeedback_rows <- nrow(d_merge_respondents_noncompliers_compliers[ Assignment_Group == "Medical Feedback",])
ITTd_Medical_Feedback <- total_MedFeedback_compliers/total_MedFeedback_rows
#### Take-Up Rates for Self-Reflect
total_selfreflect_compliers <- nrow(d_merge_respondents_noncompliers_compliers[ Assignment_Group=="Self-Reflect" & Complier_Dummy==1, ])
total_selfreflect_rows <- nrow(d_merge_respondents_noncompliers_compliers[ Assignment_Group == "Self-Reflect",])
ITTd_Self_Reflect <- total_selfreflect_compliers/total_selfreflect_rows
#### Take-Up Rates for Positive Images
total_positiveimages_compliers <- nrow(d_merge_respondents_noncompliers_compliers[ Assignment_Group=="Positive Images" & Complier_Dummy==1, ])
total_positiveimages_rows <- nrow(d_merge_respondents_noncompliers_compliers[ Assignment_Group == "Positive Images",])
ITTd_Positive_Images <- total_positiveimages_compliers/total_positiveimages_rows
#### Take-Up Rates for Negative Images
total_negativeimages_compliers <- nrow(d_merge_respondents_noncompliers_compliers[ Assignment_Group=="Negative Images" & Complier_Dummy==1, ])
total_negativeimages_rows <- nrow(d_merge_respondents_noncompliers_compliers[ Assignment_Group == "Negative Images",])
ITTd_Negative_Images <- total_negativeimages_compliers/total_negativeimages_rows
#### Take-Up Rates for Control
total_control_compliers <- nrow(d_merge_respondents_noncompliers_compliers[ Assignment_Group=="Control" & Complier_Dummy==1, ])
total_control_rows <- nrow(d_merge_respondents_noncompliers_compliers[ Assignment_Group == "Control",])
ITTd_Control <- total_control_compliers/total_control_rows
##############
# Medical Feedback CACE
ITT_Medical_Feedback <- d_merge_respondents_noncompliers_compliers[ Assignment_Group=="Medical Feedback" ,
mean(TaskPhase2_Score)] -
d_merge_respondents_noncompliers_compliers[Assignment_Group=="Control" , mean(TaskPhase2_Score)]
CACE_Medical_Feedback <- ITT_Medical_Feedback/ITTd_Medical_Feedback
# Positive Images CACE
ITT_Positive_Images <- d_merge_respondents_noncompliers_compliers[ Assignment_Group=="Positive Images" , mean(TaskPhase2_Score)] -
d_merge_respondents_noncompliers_compliers[Assignment_Group=="Control" , mean(TaskPhase2_Score)]
CACE_Positive_Images <- ITT_Positive_Images/ITTd_Positive_Images
# Negative Images CACE
ITT_Negative_Images <- d_merge_respondents_noncompliers_compliers[ Assignment_Group=="Negative Images" , mean(TaskPhase2_Score)] -
d_merge_respondents_noncompliers_compliers[Assignment_Group=="Control" , mean(TaskPhase2_Score)]
CACE_Negative_Images <- ITT_Negative_Images/ITTd_Negative_Images
# Self-Reflect CACE
ITT_Self_Reflect <- d_merge_respondents_noncompliers_compliers[ Assignment_Group=="Self-Reflect" , mean(TaskPhase2_Score)] -
d_merge_respondents_noncompliers_compliers[Assignment_Group=="Control" , mean(TaskPhase2_Score)]
CACE_Self_Reflect <- ITT_Self_Reflect/ITTd_Self_Reflect
# Any Treatment CACE
ITT <- d_merge_respondents_noncompliers_compliers[ Treatment_Dummy==1 , mean(TaskPhase2_Score)] -
d_merge_respondents_noncompliers_compliers[Treatment_Dummy==0 , mean(TaskPhase2_Score)]
ITTd <- nrow(d_merge_respondents_noncompliers_compliers[ Treatment_Dummy == 1 & Complier_Dummy == 1,])/
nrow(d_merge_respondents_noncompliers_compliers[Treatment_Dummy == 1])
CACE_Any_Treatment <- ITT/ITTd
kable(d_respondents_noncompliers[ , table(Assignment_Group)])
pairwise.prop.test(x = c(total_MedFeedback_compliers, total_selfreflect_compliers, total_positiveimages_compliers,
total_negativeimages_compliers, total_control_compliers),
n = c(total_MedFeedback_rows, total_selfreflect_rows, total_positiveimages_rows,
total_negativeimages_rows, total_control_rows), p.adjust.method = "bonferroni")
prop.test(x = c(total_MedFeedback_compliers, total_selfreflect_compliers, total_positiveimages_compliers,
total_negativeimages_compliers, total_control_compliers),
n = c(total_MedFeedback_rows, total_selfreflect_rows, total_positiveimages_rows,
total_negativeimages_rows, total_control_rows))
treatment_groups <- c("Any Treatment", "Medical Feedback", "Negative Images", "Positive Images", "Self-Reflect")
list_CACEs <- round(c(CACE_Any_Treatment, CACE_Medical_Feedback, CACE_Negative_Images, CACE_Positive_Images, CACE_Self_Reflect),4)
CACE_list <- cbind(treatment_groups, list_CACEs)
kable(CACE_list)
test <- d_merge_respondents_noncompliers_compliers[Assignment_Group %in% c("Medical Feedback", "Control"),
ivreg(TaskPhase2_Score ~ Complier_Dummy, ~Treatment_Dummy)]
coeftest(test, vcov. = vcovHC(test, type = "HC1"))
d_merge_respondents_noncompliers_compliers[ Assignment_Group %in% c("Medical Feedback", "Control"),table(Treatment_Dummy, Complier_Dummy)]
# renaming Control Clicks Phase 1 - submit after 70, advance after 180 seconds
setnames(d_respondents,
old = c('Q70_First Click', 'Q70_Last Click',
'Q70_Page Submit', 'Q70_Click Count'),
new = c('Control_Phase1_First_ClickTime', 'Control_Phase1_Last_ClickTime',
'Control_Phase1_SubmitTime', 'Control_Phase1_NumClicks'))
# renaming Control Clicks Phase 2 - submit after 70, advance after 180 seconds
setnames(d_respondents,
old = c('Q90_First Click', 'Q90_Last Click',
'Q90_Page Submit', 'Q90_Click Count'),
new = c('Control_Phase2_First_ClickTime', 'Control_Phase2_Last_ClickTime',
'Control_Phase2_SubmitTime', 'Control_Phase2_NumClicks'))
# renaming Self Reflect Clicks Phase 1 - submit after 90, advance after 240 seconds
setnames(d_respondents,
old = c('Q61_First Click', 'Q61_Last Click',
'Q61_Page Submit', 'Q61_Click Count'),
new = c('Self_Reflect_Phase1_First_ClickTime', 'Self_Reflect_Phase1_Last_ClickTime',
'Self_Reflect_Phase1_SubmitTime', 'Self_Reflect_Phase1_NumClicks'))
# renaming Self Reflect Clicks Phase 2 - submit after 90, advance after 240 seconds
setnames(d_respondents,
old = c('Q62_First Click', 'Q62_Last Click',
'Q62_Page Submit', 'Q62_Click Count'),
new = c('Self_Reflect_Phase2_First_ClickTime', 'Self_Reflect_Phase2_Last_ClickTime',
'Self_Reflect_Phase2_SubmitTime', 'Self_Reflect_Phase2_NumClicks'))
# renaming Medical Feedback Clicks Phase 1 - submit after 90, advance after 240 seconds
setnames(d_respondents,
old = c('Q63_First Click', 'Q63_Last Click',
'Q63_Page Submit', 'Q63_Click Count'),
new = c('Medical_Feedback_Phase1_First_ClickTime',
'Medical_Feedback_Phase1_Last_ClickTime',
'Medical_Feedback_Phase1_SubmitTime',
'Medical_Feedback_Phase1_NumClicks'))
# renaming Medical Feedback Clicks Phase 2 - submit after 90, advance after 240 seconds
setnames(d_respondents,
old = c('Q64_First Click', 'Q64_Last Click',
'Q64_Page Submit', 'Q64_Click Count'),
new = c('Medical_Feedback_Phase2_First_ClickTime',
'Medical_Feedback_Phase2_Last_ClickTime',
'Medical_Feedback_Phase2_SubmitTime',
'Medical_Feedback_Phase2_NumClicks'))
# renaming Positive Images Clicks Phase 1 - submit after 45, advance after 120 seconds
setnames(d_respondents,
old = c('Q65_First Click', 'Q65_Last Click',
'Q65_Page Submit', 'Q65_Click Count'),
new = c('Positive_Images_Phase1_First_ClickTime',
'Positive_Images_Phase1_Last_ClickTime',
'Positive_Images_Phase1_SubmitTime',
'Positive_Images_Phase1_NumClicks'))
# renaming Positive Images Clicks Phase 2 - submit after 45, advance after 120 seconds
setnames(d_respondents,
old = c('Q66_First Click', 'Q66_Last Click',
'Q66_Page Submit', 'Q66_Click Count'),
new = c('Positive_Images_Phase2_First_ClickTime',
'Positive_Images_Phase2_Last_ClickTime',
'Positive_Images_Phase2_SubmitTime',
'Positive_Images_Phase2_NumClicks'))
# renaming Negative Images Clicks Phase 1 - submit after 45, advance after 120 seconds
setnames(d_respondents,
old = c('Q67_First Click', 'Q67_Last Click',
'Q67_Page Submit', 'Q67_Click Count'),
new = c('Negative_Images_Phase1_First_ClickTime',
'Negative_Images_Phase1_Last_ClickTime',
'Negative_Images_Phase1_SubmitTime',
'Negative_Images_Phase1_NumClicks'))
# renaming Negative Images Clicks Phase 2 - submit after 45, advance after 120 seconds
setnames(d_respondents,
old = c('Q68_First Click', 'Q68_Last Click',
'Q68_Page Submit', 'Q68_Click Count'),
new = c('Negative_Images_Phase2_First_ClickTime',
'Negative_Images_Phase2_Last_ClickTime',
'Negative_Images_Phase2_SubmitTime',
'Negative_Images_Phase2_NumClicks'))
################# set up datatable for Treatment Phase 1 Times
a <- d_respondents[ Assignment_Group == "Medical Feedback", Medical_Feedback_Phase1_SubmitTime]
b <- d_respondents[ Assignment_Group == "Control", (Control_Phase1_SubmitTime)]
c <- d_respondents[ Assignment_Group == "Positive Images", (Positive_Images_Phase1_SubmitTime)]
d <- d_respondents[ Assignment_Group == "Negative Images", (Negative_Images_Phase1_SubmitTime)]
e <- d_respondents[ Assignment_Group == "Self-Reflect", (Self_Reflect_Phase1_SubmitTime)]
#(coalesce(c(a,b,c,d,e)))
d_noncompliance_1 <- data.table(id=1:333)
d_noncompliance_1[ , Assignment_Group := (c(rep("Medical Feedback", 66), rep("Control", 65), rep("Positive Images", 66), rep("Negative Images", 70), rep("Self-Reflect", 66)))]
d_noncompliance_1[ , Treatment_Phase1_SubmitTime := (coalesce(c(a,b,c,d,e)))]
#################### set up datatable for Treatment Phase 2 Times
a <- d_respondents[ Assignment_Group == "Medical Feedback", Medical_Feedback_Phase2_SubmitTime]
b <- d_respondents[ Assignment_Group == "Control", (Control_Phase2_SubmitTime)]
c <- d_respondents[ Assignment_Group == "Positive Images", (Positive_Images_Phase2_SubmitTime)]
d <- d_respondents[ Assignment_Group == "Negative Images", (Negative_Images_Phase2_SubmitTime)]
e <- d_respondents[ Assignment_Group == "Self-Reflect", (Self_Reflect_Phase2_SubmitTime)]
#(coalesce(c(a,b,c,d,e)))
d_noncompliance_2 <- data.table(id=1:333)
d_noncompliance_2[ , Assignment_Group := (c(rep("Medical Feedback", 66), rep("Control", 65), rep("Positive Images", 66), rep("Negative Images", 70), rep("Self-Reflect", 66)))]
d_noncompliance_2[ , Treatment_Phase2_SubmitTime := (coalesce(c(a,b,c,d,e)))]
########## plot density distributions of timing for Treatment Phase 1: Medical Feedback vs Self-Reflect
ggplot(d_noncompliance_1[Assignment_Group %in% c("Medical Feedback", "Self-Reflect")], aes(x=Treatment_Phase1_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(60, 500) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 1 Duration Distribution") + geom_vline(xintercept = 90, color = "blue") + geom_vline(xintercept = 240, color = "red") + theme(plot.title = element_text(hjust = 0.5))
ggplot(d_noncompliance_2[Assignment_Group %in% c("Medical Feedback", "Self-Reflect")], aes(x=Treatment_Phase2_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(60, 500) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 2 Duration Distribution") + geom_vline(xintercept = 90, color = "blue") + geom_vline(xintercept = 240, color = "red") + theme(plot.title = element_text(hjust = 0.5))
t.test(d_noncompliance_1[Assignment_Group %in% c("Medical Feedback"), Treatment_Phase1_SubmitTime],
d_noncompliance_1[Assignment_Group %in% c("Self-Reflect") & Treatment_Phase1_SubmitTime < 250, Treatment_Phase1_SubmitTime])
t.test(d_noncompliance_2[Assignment_Group %in% c("Medical Feedback"), Treatment_Phase2_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Self-Reflect") & Treatment_Phase2_SubmitTime < 250, Treatment_Phase2_SubmitTime])
#statistically significant difference in time spent in treatment 1 and 2 for medical feedback
t.test(d_noncompliance_1[Assignment_Group %in% c("Medical Feedback"), Treatment_Phase1_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Medical Feedback"), Treatment_Phase2_SubmitTime])
#statistically significant difference in time spent in treatment 1 and 2 for self-reflect
t.test(d_noncompliance_1[Assignment_Group %in% c("Self-Reflect"), Treatment_Phase1_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Self-Reflect"), Treatment_Phase2_SubmitTime])
########## plot density distributions of timing for Treatment Phase 1: Positive vs Negative Images
ggplot(d_noncompliance_1[Assignment_Group %in% c("Positive Images", "Negative Images")], aes(x=Treatment_Phase1_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(20, 200) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 1 Duration Distribution") + geom_vline(xintercept = 45, color = "blue") + geom_vline(xintercept = 120, color = "red") + theme(plot.title = element_text(hjust = 0.5))
ggplot(d_noncompliance_2[Assignment_Group %in% c("Positive Images", "Negative Images")], aes(x=Treatment_Phase2_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(20, 200) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 2 Duration Distribution") + geom_vline(xintercept = 45, color = "blue") + geom_vline(xintercept = 120, color = "red") + theme(plot.title = element_text(hjust = 0.5))
t.test(d_noncompliance_1[Assignment_Group %in% c("Positive Images"), Treatment_Phase1_SubmitTime],
d_noncompliance_1[Assignment_Group %in% c("Negative Images") & Treatment_Phase1_SubmitTime < 150, Treatment_Phase1_SubmitTime])
t.test(d_noncompliance_2[Assignment_Group %in% c("Positive Images"), Treatment_Phase2_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Negative Images") & Treatment_Phase2_SubmitTime < 150, Treatment_Phase2_SubmitTime])
#statistically significant difference in time spent in treatment 1 and 2 for positive images
t.test(d_noncompliance_1[Assignment_Group %in% c("Positive Images"), Treatment_Phase1_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Positive Images"), Treatment_Phase2_SubmitTime])
#no statistically significant difference in time spent in treatment 1 and 2 for negative images
t.test(d_noncompliance_1[Assignment_Group %in% c("Negative Images"), Treatment_Phase1_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Negative Images"), Treatment_Phase2_SubmitTime])
nrow(d_merge_respondents_noncompliers_compliers)
nrow(d_respondents_noncompliers)
kable(d_respondents_noncompliers[ , table(Assignment_Group)])
pairwise.prop.test(x = c(total_MedFeedback_compliers, total_selfreflect_compliers, total_positiveimages_compliers,
total_negativeimages_compliers, total_control_compliers),
n = c(total_MedFeedback_rows, total_selfreflect_rows, total_positiveimages_rows,
total_negativeimages_rows, total_control_rows), p.adjust.method = "bonferroni")
prop.test(x = c(total_MedFeedback_compliers, total_selfreflect_compliers, total_positiveimages_compliers,
total_negativeimages_compliers, total_control_compliers),
n = c(total_MedFeedback_rows, total_selfreflect_rows, total_positiveimages_rows,
total_negativeimages_rows, total_control_rows))
kable(d_respondents_noncompliers[ , table(Assignment_Group)])
prop.test(x = c(total_MedFeedback_compliers, total_selfreflect_compliers, total_positiveimages_compliers,
total_negativeimages_compliers, total_control_compliers),
n = c(total_MedFeedback_rows, total_selfreflect_rows, total_positiveimages_rows,
total_negativeimages_rows, total_control_rows))
complier_props <- prop.test(x = c(total_MedFeedback_compliers, total_selfreflect_compliers,
total_positiveimages_compliers, total_negativeimages_compliers,
total_control_compliers),
n = c(total_MedFeedback_rows, total_selfreflect_rows, total_positiveimages_rows,
total_negativeimages_rows, total_control_rows))
prop.test(x = c(total_MedFeedback_compliers, total_selfreflect_compliers, total_positiveimages_compliers,
total_negativeimages_compliers, total_control_compliers),
n = c(total_MedFeedback_rows, total_selfreflect_rows, total_positiveimages_rows,
total_negativeimages_rows, total_control_rows))$coefficients
prop.test(x = c(total_MedFeedback_compliers, total_selfreflect_compliers, total_positiveimages_compliers,
total_negativeimages_compliers, total_control_compliers),
n = c(total_MedFeedback_rows, total_selfreflect_rows, total_positiveimages_rows,
total_negativeimages_rows, total_control_rows))[2,4]
prop.test(x = c(total_MedFeedback_compliers, total_selfreflect_compliers, total_positiveimages_compliers,
total_negativeimages_compliers, total_control_compliers),
n = c(total_MedFeedback_rows, total_selfreflect_rows, total_positiveimages_rows,
total_negativeimages_rows, total_control_rows))
prop.test(x = c(total_MedFeedback_compliers, total_selfreflect_compliers, total_positiveimages_compliers,
total_negativeimages_compliers, total_control_compliers),
n = c(total_MedFeedback_rows, total_selfreflect_rows, total_positiveimages_rows,
total_negativeimages_rows, total_control_rows))[1]
prop.test(x = c(total_MedFeedback_compliers, total_selfreflect_compliers, total_positiveimages_compliers,
total_negativeimages_compliers, total_control_compliers),
n = c(total_MedFeedback_rows, total_selfreflect_rows, total_positiveimages_rows,
total_negativeimages_rows, total_control_rows))[3]
### Exploratory Discussion - Noncompliance During Task Phases
Based on our definition of noncompliance, we do not consider noncompliance during the treatment phases. Although we have excluded noncompliers from our main regressions, for exploratory reasons, we can consider a scenario in which we do include them in our analysis.
We start with examining the distribution of noncompliers across control and treatment groups. Interestingly, there are more noncompliers in the "Negative Images" treatment group than in any other group. We run a 5-sample proportions test to see whether the take-up rates across treatment groups are similar. With a p-value of `r prop.test(x = c(total_MedFeedback_compliers, total_selfreflect_compliers, total_positiveimages_compliers,
total_negativeimages_compliers, total_control_compliers),
n = c(total_MedFeedback_rows, total_selfreflect_rows, total_positiveimages_rows,
total_negativeimages_rows, total_control_rows))[3]`,  There are no statistically significant differences between take-up rates across groups at the p = 0.05 level.
prop.test(x = c(total_MedFeedback_compliers, total_selfreflect_compliers, total_positiveimages_compliers,total_negativeimages_compliers, total_control_compliers), n = c(total_MedFeedback_rows, total_selfreflect_rows, total_positiveimages_rows, total_negativeimages_rows, total_control_rows))[3]
kable(d_respondents_noncompliers[ , table(Assignment_Group)])
prop.test(x = c(total_MedFeedback_compliers, total_selfreflect_compliers, total_positiveimages_compliers,
total_negativeimages_compliers, total_control_compliers),
n = c(total_MedFeedback_rows, total_selfreflect_rows, total_positiveimages_rows,
total_negativeimages_rows, total_control_rows))
prop.test(x = c(total_MedFeedback_compliers, total_selfreflect_compliers, total_positiveimages_compliers,
total_negativeimages_compliers, total_control_compliers),
n = c(total_MedFeedback_rows, total_selfreflect_rows, total_positiveimages_rows,
total_negativeimages_rows, total_control_rows))[3]
kable(d_respondents_noncompliers[ , table(Assignment_Group)])
prop.test(x = c(total_MedFeedback_compliers, total_selfreflect_compliers, total_positiveimages_compliers,
total_negativeimages_compliers, total_control_compliers),
n = c(total_MedFeedback_rows, total_selfreflect_rows, total_positiveimages_rows,
total_negativeimages_rows, total_control_rows))
test <- d_merge_respondents_noncompliers_compliers[Assignment_Group %in% c("Medical Feedback", "Control"),
ivreg(TaskPhase2_Score ~ Complier_Dummy, ~Treatment_Dummy)]
coeftest(test, vcov. = vcovHC(test, type = "HC1"))
test <- d_merge_respondents_noncompliers_compliers[Assignment_Group %in% c("Medical Feedback", "Control"),
ivreg(TaskPhase2_Score ~ Complier_Dummy, ~Assignment_Group)]
coeftest(test, vcov. = vcovHC(test, type = "HC1"))
########## plot density distributions of timing for Treatment Phase 1: Medical Feedback vs Self-Reflect
ggplot(d_noncompliance_1[Assignment_Group %in% c("Medical Feedback", "Self-Reflect")], aes(x=Treatment_Phase1_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(60, 500) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 1 Duration Distribution") + geom_vline(xintercept = 90, color = "blue") + geom_vline(xintercept = 240, color = "red") + theme(plot.title = element_text(hjust = 0.5))
ggplot(d_noncompliance_2[Assignment_Group %in% c("Medical Feedback", "Self-Reflect")], aes(x=Treatment_Phase2_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(60, 500) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 2 Duration Distribution") + geom_vline(xintercept = 90, color = "blue") + geom_vline(xintercept = 240, color = "red") + theme(plot.title = element_text(hjust = 0.5))
t.test(d_noncompliance_1[Assignment_Group %in% c("Medical Feedback"), Treatment_Phase1_SubmitTime],
d_noncompliance_1[Assignment_Group %in% c("Self-Reflect") & Treatment_Phase1_SubmitTime < 250, Treatment_Phase1_SubmitTime])
t.test(d_noncompliance_2[Assignment_Group %in% c("Medical Feedback"), Treatment_Phase2_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Self-Reflect") & Treatment_Phase2_SubmitTime < 250, Treatment_Phase2_SubmitTime])
#statistically significant difference in time spent in treatment 1 and 2 for medical feedback
t.test(d_noncompliance_1[Assignment_Group %in% c("Medical Feedback"), Treatment_Phase1_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Medical Feedback"), Treatment_Phase2_SubmitTime])
#statistically significant difference in time spent in treatment 1 and 2 for self-reflect
t.test(d_noncompliance_1[Assignment_Group %in% c("Self-Reflect"), Treatment_Phase1_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Self-Reflect"), Treatment_Phase2_SubmitTime])
########## plot density distributions of timing for Treatment Phase 1: Medical Feedback vs Self-Reflect
ggplot(d_noncompliance_1[Assignment_Group %in% c("Medical Feedback", "Self-Reflect")], aes(x=Treatment_Phase1_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(60, 500) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 1 Duration Distribution") + geom_vline(xintercept = 90, color = "blue") + geom_vline(xintercept = 240, color = "red") + theme(plot.title = element_text(hjust = 0.5))
ggplot(d_noncompliance_2[Assignment_Group %in% c("Medical Feedback", "Self-Reflect")], aes(x=Treatment_Phase2_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(60, 500) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 2 Duration Distribution") + geom_vline(xintercept = 90, color = "blue") + geom_vline(xintercept = 240, color = "red") + theme(plot.title = element_text(hjust = 0.5))
t.test(d_noncompliance_1[Assignment_Group %in% c("Medical Feedback") & Treatment_Phase1_SubmitTime <= 240,
Treatment_Phase1_SubmitTime],
d_noncompliance_1[Assignment_Group %in% c("Self-Reflect") & Treatment_Phase1_SubmitTime <= 240,
Treatment_Phase1_SubmitTime])
t.test(d_noncompliance_2[Assignment_Group %in% c("Medical Feedback") & Treatment_Phase2_SubmitTime <= 240,
Treatment_Phase2_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Self-Reflect") & Treatment_Phase2_SubmitTime <= 240,
Treatment_Phase2_SubmitTime])
#statistically significant difference in time spent in treatment 1 and 2 for medical feedback
t.test(d_noncompliance_1[Assignment_Group %in% c("Medical Feedback"), Treatment_Phase1_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Medical Feedback"), Treatment_Phase2_SubmitTime])
#statistically significant difference in time spent in treatment 1 and 2 for self-reflect
t.test(d_noncompliance_1[Assignment_Group %in% c("Self-Reflect"), Treatment_Phase1_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Self-Reflect"), Treatment_Phase2_SubmitTime])
########## plot density distributions of timing for Treatment Phase 1: Positive vs Negative Images
ggplot(d_noncompliance_1[Assignment_Group %in% c("Positive Images", "Negative Images")], aes(x=Treatment_Phase1_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(20, 200) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 1 Duration Distribution") + geom_vline(xintercept = 45, color = "blue") + geom_vline(xintercept = 120, color = "red") + theme(plot.title = element_text(hjust = 0.5))
ggplot(d_noncompliance_2[Assignment_Group %in% c("Positive Images", "Negative Images")], aes(x=Treatment_Phase2_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(20, 200) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 2 Duration Distribution") + geom_vline(xintercept = 45, color = "blue") + geom_vline(xintercept = 120, color = "red") + theme(plot.title = element_text(hjust = 0.5))
t.test(d_noncompliance_1[Assignment_Group %in% c("Positive Images"), Treatment_Phase1_SubmitTime],
d_noncompliance_1[Assignment_Group %in% c("Negative Images") & Treatment_Phase1_SubmitTime <= 120, Treatment_Phase1_SubmitTime])
t.test(d_noncompliance_2[Assignment_Group %in% c("Positive Images"), Treatment_Phase2_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Negative Images") & Treatment_Phase2_SubmitTime <= 120, Treatment_Phase2_SubmitTime])
#statistically significant difference in time spent in treatment 1 and 2 for positive images
t.test(d_noncompliance_1[Assignment_Group %in% c("Positive Images"), Treatment_Phase1_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Positive Images"), Treatment_Phase2_SubmitTime])
#no statistically significant difference in time spent in treatment 1 and 2 for negative images
t.test(d_noncompliance_1[Assignment_Group %in% c("Negative Images"), Treatment_Phase1_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Negative Images"), Treatment_Phase2_SubmitTime])
t.test(d_noncompliance_1[Assignment_Group %in% c("Positive Images"), Treatment_Phase1_SubmitTime], d_noncompliance_1[Assignment_Group %in% c("Negative Images") & Treatment_Phase1_SubmitTime <= 120, Treatment_Phase1_SubmitTime])[3]
t.test(d_noncompliance_1[Assignment_Group %in% c("Positive Images"),Treatment_Phase1_SubmitTime],  d_noncompliance_2[Assignment_Group %in% c("Positive Images"), Treatment_Phase2_SubmitTime])[3]
t.test(d_noncompliance_1[Assignment_Group %in% c("Negative Images"), Treatment_Phase1_SubmitTime], d_noncompliance_2[Assignment_Group %in% c("Negative Images"), Treatment_Phase2_SubmitTime])[3]
#### set up t-tests comparing the submit times for Treatment Phase I
ggplot(d_noncompliance_1[Assignment_Group %in% c("Control")], aes(x=Treatment_Phase1_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(20, 300) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 1 Duration Distribution") + geom_vline(xintercept = 70, color = "blue") + geom_vline(xintercept = 180, color = "red") + theme(plot.title = element_text(hjust = 0.5))
ggplot(d_noncompliance_2[Assignment_Group %in% c("Control")], aes(x=Treatment_Phase2_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(20, 300) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 2 Duration Distribution") + geom_vline(xintercept = 70, color = "blue") + geom_vline(xintercept = 180, color = "red") + theme(plot.title = element_text(hjust = 0.5))
t.test(d_noncompliance_1[Assignment_Group %in% c("Control"), Treatment_Phase1_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Control"), Treatment_Phase2_SubmitTime])
t.test(d_noncompliance_1[Assignment_Group %in% c("Control"), Treatment_Phase1_SubmitTime], d_noncompliance_2[Assignment_Group %in% c("Control"), Treatment_Phase2_SubmitTime])[3]
#### set up t-tests comparing the submit times for Treatment Phase I
ggplot(d_noncompliance_1[Assignment_Group %in% c("Control")], aes(x=Treatment_Phase1_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(20, 300) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 1 Duration Distribution") + geom_vline(xintercept = 70, color = "blue") + geom_vline(xintercept = 180, color = "red") + theme(plot.title = element_text(hjust = 0.5))
ggplot(d_noncompliance_2[Assignment_Group %in% c("Control")], aes(x=Treatment_Phase2_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(20, 300) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 2 Duration Distribution") + geom_vline(xintercept = 70, color = "blue") + geom_vline(xintercept = 180, color = "red") + theme(plot.title = element_text(hjust = 0.5))
t.test(d_noncompliance_1[Assignment_Group %in% c("Control") & Treatment_Phase1_SubmitTime <= 180, Treatment_Phase1_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Control") & Treatment_Phase1_SubmitTime <= 180, Treatment_Phase2_SubmitTime])
#### set up t-tests comparing the submit times for Treatment Phase I
ggplot(d_noncompliance_1[Assignment_Group %in% c("Control")], aes(x=Treatment_Phase1_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(20, 300) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 1 Duration Distribution") + geom_vline(xintercept = 70, color = "blue") + geom_vline(xintercept = 180, color = "red") + theme(plot.title = element_text(hjust = 0.5))
ggplot(d_noncompliance_2[Assignment_Group %in% c("Control")], aes(x=Treatment_Phase2_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(20, 300) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 2 Duration Distribution") + geom_vline(xintercept = 70, color = "blue") + geom_vline(xintercept = 180, color = "red") + theme(plot.title = element_text(hjust = 0.5))
t.test(d_noncompliance_1[Assignment_Group %in% c("Control") & Treatment_Phase1_SubmitTime <= 180, Treatment_Phase1_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Control") & Treatment_Phase2_SubmitTime <= 180, Treatment_Phase2_SubmitTime])
########## plot density distributions of timing for Treatment Phase 1: Medical Feedback vs Self-Reflect
ggplot(d_noncompliance_1[Assignment_Group %in% c("Medical Feedback", "Self-Reflect")], aes(x=Treatment_Phase1_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(60, 500) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 1 Duration Distribution") + geom_vline(xintercept = 90, color = "blue") + geom_vline(xintercept = 240, color = "red") + theme(plot.title = element_text(hjust = 0.5))
ggplot(d_noncompliance_2[Assignment_Group %in% c("Medical Feedback", "Self-Reflect")], aes(x=Treatment_Phase2_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(60, 500) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 2 Duration Distribution") + geom_vline(xintercept = 90, color = "blue") + geom_vline(xintercept = 240, color = "red") + theme(plot.title = element_text(hjust = 0.5))
t.test(d_noncompliance_1[Assignment_Group %in% c("Medical Feedback") & Treatment_Phase1_SubmitTime <= 240,
Treatment_Phase1_SubmitTime],
d_noncompliance_1[Assignment_Group %in% c("Self-Reflect") & Treatment_Phase1_SubmitTime <= 240,
Treatment_Phase1_SubmitTime])
t.test(d_noncompliance_2[Assignment_Group %in% c("Medical Feedback") & Treatment_Phase2_SubmitTime <= 240,
Treatment_Phase2_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Self-Reflect") & Treatment_Phase2_SubmitTime <= 240,
Treatment_Phase2_SubmitTime])
#statistically significant difference in time spent in treatment 1 and 2 for medical feedback
t.test(d_noncompliance_1[Assignment_Group %in% c("Medical Feedback") & Treatment_Phase1_SubmitTime <= 240,
Treatment_Phase1_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Medical Feedback") & Treatment_Phase2_SubmitTime <= 240,
Treatment_Phase2_SubmitTime])
#statistically significant difference in time spent in treatment 1 and 2 for self-reflect
t.test(d_noncompliance_1[Assignment_Group %in% c("Self-Reflect") & Treatment_Phase1_SubmitTime <= 240,
Treatment_Phase1_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Self-Reflect") & Treatment_Phase2_SubmitTime <= 240,
Treatment_Phase2_SubmitTime])
########## plot density distributions of timing for Treatment Phase 1: Positive vs Negative Images
ggplot(d_noncompliance_1[Assignment_Group %in% c("Positive Images", "Negative Images")], aes(x=Treatment_Phase1_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(20, 200) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 1 Duration Distribution") + geom_vline(xintercept = 45, color = "blue") + geom_vline(xintercept = 120, color = "red") + theme(plot.title = element_text(hjust = 0.5))
ggplot(d_noncompliance_2[Assignment_Group %in% c("Positive Images", "Negative Images")], aes(x=Treatment_Phase2_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(20, 200) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 2 Duration Distribution") + geom_vline(xintercept = 45, color = "blue") + geom_vline(xintercept = 120, color = "red") + theme(plot.title = element_text(hjust = 0.5))
t.test(d_noncompliance_1[Assignment_Group %in% c("Positive Images"), Treatment_Phase1_SubmitTime],
d_noncompliance_1[Assignment_Group %in% c("Negative Images") & Treatment_Phase1_SubmitTime <= 120,
Treatment_Phase1_SubmitTime])
t.test(d_noncompliance_2[Assignment_Group %in% c("Positive Images"), Treatment_Phase2_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Negative Images") & Treatment_Phase2_SubmitTime <= 120,
Treatment_Phase2_SubmitTime])
#statistically significant difference in time spent in treatment 1 and 2 for positive images
t.test(d_noncompliance_1[Assignment_Group %in% c("Positive Images") & Treatment_Phase1_SubmitTime <= 120,
Treatment_Phase1_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Positive Images") & Treatment_Phase2_SubmitTime <= 120,
Treatment_Phase2_SubmitTime])
#no statistically significant difference in time spent in treatment 1 and 2 for negative images
t.test(d_noncompliance_1[Assignment_Group %in% c("Negative Images") & Treatment_Phase1_SubmitTime <= 120,
Treatment_Phase1_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Negative Images") & Treatment_Phase2_SubmitTime <= 120,
Treatment_Phase2_SubmitTime])
#### set up t-tests comparing the submit times for Treatment Phase I
ggplot(d_noncompliance_1[Assignment_Group %in% c("Control")], aes(x=Treatment_Phase1_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(20, 300) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 1 Duration Distribution") + geom_vline(xintercept = 70, color = "blue") + geom_vline(xintercept = 180, color = "red") + theme(plot.title = element_text(hjust = 0.5))
ggplot(d_noncompliance_2[Assignment_Group %in% c("Control")], aes(x=Treatment_Phase2_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(20, 300) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 2 Duration Distribution") + geom_vline(xintercept = 70, color = "blue") + geom_vline(xintercept = 180, color = "red") + theme(plot.title = element_text(hjust = 0.5))
t.test(d_noncompliance_1[Assignment_Group %in% c("Control") & Treatment_Phase1_SubmitTime <= 180, Treatment_Phase1_SubmitTime],
d_noncompliance_2[Assignment_Group %in% c("Control") & Treatment_Phase2_SubmitTime <= 180, Treatment_Phase2_SubmitTime])
kable(d_respondents_noncompliers[ , table(Assignment_Group)])
prop.test(x = c(total_MedFeedback_compliers, total_selfreflect_compliers, total_positiveimages_compliers,
total_negativeimages_compliers, total_control_compliers),
n = c(total_MedFeedback_rows, total_selfreflect_rows, total_positiveimages_rows,
total_negativeimages_rows, total_control_rows))
