}
g_legend<-function(a.gplot){
#extract legend from a ggplot object
#https://stackoverflow.com/questions/13649473/add-a-common-legend-for-combined-ggplots
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
#n survey responses > 30 mins., take outlier out for analysis but discuss below
outlier <- round(d_respondents[`Duration (in seconds)` > 60*30, `Duration (in seconds)`/60/60],1)
completions <- d_respondents[`Duration (in seconds)` < 60*30]
#95% of participants finished below this point in mins.
upper_cl <- completions[, round(mean((`Duration (in seconds)`)/60) + (2 *(sd(`Duration (in seconds)`)/60)), 1)]
#density plot of time completed by assignment group in mins.
ggplot(completions, aes(x=`Duration (in seconds)`/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,60) +
ggtitle("Survey Duration by Assignment Group (sans Outlier)") +
labs(x = "Minutes") +
geom_vline(xintercept = upper_cl, linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
# check balance between assignment groups
d_respondents[, .N, by = .(Assignment_Group)]
# check balance between genders
gender_chisq <- chisq.test(d_respondents[ , table(Assignment_Group, Gender)])
create_heatmap(var1 = d_respondents$Assignment_Group,var2 = d_respondents$Gender) +
xlab('Assignment Group') +
ylab('Gender') +
labs(title = 'Contingency table between gender and assignment group',
caption = paste0('Assuming gender distributions are the same among assignment groups, a chi-squared test for independence with ',
round(gender_chisq$parameter,4),' \ndegrees of freedom ', 'yields p=',
round(gender_chisq$p.value,4),
', suggesting that there is no relationship between gender and assignment groups at a \nsignificance level of 0.05.')) +
theme(plot.caption = element_text(hjust = 0))
# check balance between age ranges
age_chisq <- chisq.test(d_respondents[ , table(Assignment_Group, Age_Range)],simulate.p.value = TRUE)
create_heatmap(var1 = d_respondents$Assignment_Group,var2 = d_respondents$Age_Range) +
xlab('Assignment Group') +
ylab('Age Range') +
labs(title = 'Contingency table between age range and assignment group',
caption = paste0('Assuming age distributions are the same among assignment groups, a chi-squared test for independence with Monte \nCarlo simulation yields p=',
round(age_chisq$p.value,4),
', suggesting that there is no relationship between age and assignment groups at a \nsignificance level of 0.05.')) +
theme(plot.caption = element_text(hjust = 0))
#check balance between education levels
edu_chisq <- chisq.test(d_respondents[ , table(Assignment_Group, Education_Level)],simulate.p.value = TRUE)
create_heatmap(var1 = d_respondents$Assignment_Group,var2 = d_respondents$Education_Level) +
xlab('Assignment Group') +
ylab('Education Level') +
labs(title = 'Contingency table between education and assignment group',
caption = paste0('Assuming education distributions are the same among assignment groups, a chi-squared test for \nindependence with Monte Carlo simulation yields p=',
round(edu_chisq$p.value,4),
', suggesting that there is no relationship \nbetween education and assignment groups at a significance level of 0.05.')) +
theme(plot.caption = element_text(hjust = 0))
# check balance between US and non-US respondents
us_chisq <- chisq.test(d_respondents[ , table(Assignment_Group, US_Dummy)])
create_heatmap(var1 = d_respondents$Assignment_Group,var2 = d_respondents$US_Dummy) +
xlab('Assignment Group') +
ylab('Country') +
scale_y_discrete(breaks=c("0", "1"),
labels=c("Non-US", "United States")) +
labs(title = 'Contingency table between country and assignment group',
caption = paste0('Assuming country distributions are the same among assignment groups, a chi-squared test for independence with \n',
round(us_chisq$parameter,4),' degrees of freedom ', 'yields p=',
round(us_chisq$p.value,4),
', suggesting that there is no relationship between country and assignment \ngroups at a significance level of 0.05.')) +
theme(plot.caption = element_text(hjust = 0))
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
knitr::kable(attrition_table,
caption = "Attrition by Stage and Feedback Type",
footnote = "Random assignment occurs before Task Phase 2")
attrition_prop_table <- as.data.frame.matrix(addmargins(round(prop.table(d_attrition[, table(Assignment_Group, Attrition_Stage)]),2)))
knitr::kable(attrition_prop_table,
caption = "Proportion of Attrition by Stage and Feedback Type",
footnote = "Random assignment occurs before Task Phase 2")
#Negative Images proportion test
prop.test(attrition_table[3,], attrition_table[6,])
#Positive Images proportion test
prop.test(attrition_table[4,], attrition_table[6,])
#before submission prop test
prop.test(attrition_table[,1], attrition_table[,5])
#before task phase 1 prop test
prop.test(attrition_table[,2], attrition_table[,5])
task2a_bp <- ggplot(d_respondents, aes(x = Treatment_Dummy, y=TaskPhase1_Score, colour=as.factor(Treatment_Dummy))) +
geom_boxplot() +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = .75, linetype = "dashed") +
xlab('') +
ylab('Task Score (%)') +
ggtitle("Pre Treatment Scores") +
scale_y_continuous(labels = scales::percent,limits = c(0,1)) +
theme(axis.text.x = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5,size=10),
legend.position = "bottom",
legend.title = element_blank())
task2b_bp <- ggplot(d_respondents, aes(x = Treatment_Dummy, y=TaskPhase2_Score, colour=as.factor(Treatment_Dummy))) +
geom_boxplot() +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = .75, linetype = "dashed") +
xlab('') +
ylab('') +
ggtitle("Task Phase 2 Scores") +
scale_y_continuous(labels = scales::percent,limits = c(0,1)) +
theme(axis.text.x = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5,size=10),
legend.position = "none")
task2c_bp <- ggplot(d_respondents, aes(x = Treatment_Dummy, y=TaskPhase3_Score, colour=as.factor(Treatment_Dummy))) +
geom_boxplot() +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = .75, linetype = "dashed") +
xlab('') +
ylab('') +
ggtitle("Task Phase 3 Scores") +
scale_y_continuous(labels = scales::percent,limits = c(0,1)) +
theme(axis.text.x = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5,size=10),
legend.position = "none")
mylegend_2<-g_legend(task2a_bp)
grid.arrange(arrangeGrob(task2a_bp + theme(legend.position="none"),task2b_bp,task2c_bp,ncol=3),
mylegend_2,
nrow=2,
heights=c(10,1),
top = textGrob("Compare task scores in different phases\n",just='right',gp=gpar(fontsize=14,font=1)))
pander(t.test(d_respondents[Treatment_Dummy == 0, TaskPhase1_Score],
d_respondents[Treatment_Dummy == 1, TaskPhase1_Score]))
# boxplots for multiple treatment groups
task1a_bp <- ggplot(d_respondents, aes(x = Assignment_Group, y=TaskPhase1_Score, colour=as.factor(Assignment_Group))) +
geom_boxplot() +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = .75, linetype = "dashed") +
xlab('') +
ylab('Task Score (%)') +
ggtitle("Pre Treatment Scores") +
scale_y_continuous(labels = scales::percent,limits = c(0,1)) +
theme(axis.text.x = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5,size=10),
legend.position = "bottom",
legend.title = element_blank())
task1b_bp <- ggplot(d_respondents, aes(x = Assignment_Group, y=TaskPhase2_Score, colour=as.factor(Assignment_Group))) +
geom_boxplot() +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = .75, linetype = "dashed") +
xlab('') +
ylab('') +
ggtitle("Task Phase 2 Scores") +
scale_y_continuous(labels = scales::percent,limits = c(0,1)) +
theme(axis.text.x = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5,size=10),
legend.position = "none")
task1c_bp <- ggplot(d_respondents, aes(x = Assignment_Group, y=TaskPhase3_Score, colour=as.factor(Assignment_Group))) +
geom_boxplot() +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = .75, linetype = "dashed") +
xlab('') +
ylab('') +
ggtitle("Task Phase 3 Scores") +
scale_y_continuous(labels = scales::percent,limits = c(0,1)) +
theme(axis.text.x = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5,size=10),
legend.position = "none")
mylegend_1<-g_legend(task1a_bp)
grid.arrange(arrangeGrob(task1a_bp + theme(legend.position="none"),task1b_bp,task1c_bp,ncol=3),
mylegend_1,
nrow=2,
heights=c(10,1),
top = textGrob("Compare task scores in different phases\n",just='right',gp=gpar(fontsize=14,font=1)))
# Compare score across time for all groups
# https://sphweb.bumc.bu.edu/otlt/MPH-Modules/BS/BS704_Confidence_Intervals/BS704_Confidence_Intervals_print.html
# TODO finish formatting
# TODO duplicate for treatment dummy as well
summary_task_score <- (melt(d_respondents,id.vars=c('Assignment_Group'),
measure.vars = c('TaskPhase1_Score','TaskPhase2_Score','TaskPhase3_Score'))[
,.('avg_score'=mean(value),'sd_score'=sd(value),'obs'=.N),keyby=.(Assignment_Group,variable)])[
,se:=1.96*sd_score/sqrt(obs)]
summary_task_score %>%
ggplot( aes(x=variable, y=avg_score, group=Assignment_Group, color=Assignment_Group)) +
geom_errorbar(aes(ymin=avg_score-1.96*sd_score/sqrt(obs), ymax=avg_score+1.96*sd_score/sqrt(obs)),
width=.2,
position=position_dodge(0.25)) +
geom_line(position=position_dodge(0.25)) +
geom_point(position=position_dodge(0.25)) +
scale_y_continuous(labels = scales::percent,limits = c(.35,.75)) +
scale_x_discrete(breaks=c("TaskPhase1_Score", "TaskPhase2_Score","TaskPhase3_Score"),
labels=c("Phase 1", "Phase 2", "Phase 3")) +
xlab('Task Phases') +
ylab('Average Task Score (%)') +
labs(title='Average score across task phases', color = "Assignment Group")
# does any treatment have an effect on task phase 2 score?
mod_task2_a <- d_respondents[, lm(TaskPhase2_Score ~ Treatment_Dummy)]
mod_task2_b <- d_respondents[, lm(TaskPhase2_Score ~ Treatment_Dummy +
TaskPhase1_Score +
as.factor(Gender) +
as.factor(Education_Level) +
as.factor(Age_Range) +
as.factor(US_Dummy))]
#does the specific treatment group have an effect on task phase 2 score?
mod_task2_c <- d_respondents[, lm(TaskPhase2_Score ~ as.factor(Assignment_Group))]
mod_task2_d <- d_respondents[, lm(TaskPhase2_Score ~ as.factor(Assignment_Group) +
TaskPhase1_Score +
as.factor(Gender) +
as.factor(Education_Level) +
as.factor(Age_Range) +
as.factor(US_Dummy))]
#stargazer output
stargazer(mod_task2_a,
mod_task2_b,
mod_task2_c,
mod_task2_d,
se = list(get_robust_se(mod_task2_a),
get_robust_se(mod_task2_b),
get_robust_se(mod_task2_c),
get_robust_se(mod_task2_d)),
omit = c("Education_Level","Age_Range"),
add.lines = list(c('Education FE', 'No','Yes','No','Yes'),
c('Age FE','No','Yes','No','Yes')),
order = c(1,15,16,17,18),
covariate.labels = c('Any Treatment','Medical Feedback','Negative Images','Positive Images','Self-Reflection','Task Phase 1 Score','Male','US'),
omit.stat=c("ser","f"),
dep.var.labels = 'Task Phase 2 Score',
no.space=TRUE,
header=FALSE,
type='latex')
pander(anova(mod_task2_b, mod_task2_d, test='F'),style='rmarkdown')
# test final task and any treatment
mod_task3_a <- d_respondents[, lm(TaskPhase3_Score ~ Treatment_Dummy)]
mod_task3_b <- d_respondents[, lm(TaskPhase3_Score ~ Treatment_Dummy +
TaskPhase1_Score +
as.factor(Gender) +
as.factor(Education_Level) +
as.factor(Age_Range) +
as.factor(US_Dummy))]
# test final task and specific treatment
mod_task3_c <- d_respondents[, lm(TaskPhase3_Score ~ as.factor(Assignment_Group))]
mod_task3_d <- d_respondents[, lm(TaskPhase3_Score ~ as.factor(Assignment_Group) +
TaskPhase1_Score +
as.factor(Gender) +
as.factor(Education_Level) +
as.factor(Age_Range) +
as.factor(US_Dummy))]
stargazer(mod_task3_a,
mod_task3_b,
mod_task3_c,
mod_task3_d,
se = list(get_robust_se(mod_task3_a),
get_robust_se(mod_task3_b),
get_robust_se(mod_task3_c),
get_robust_se(mod_task3_d)),
omit = c("Education_Level","Age_Range"),
add.lines = list(c('Education FE', 'No','Yes','No','Yes'),
c('Age FE','No','Yes','No','Yes')),
order = c(1,15,16,17,18),
covariate.labels = c('Any Treatment','Medical Feedback','Negative Images','Positive Images','Self-Reflection','Task Phase 1 Score','Male','US'),
omit.stat=c("ser","f"),
dep.var.labels = 'Task Phase 3 Score',
no.space=TRUE,
header=FALSE,
type='latex')
pander(anova(mod_task3_b, mod_task3_d, test='F'),style='rmarkdown')
power.t.test( delta = .05, sd = .16, sig.level = 0.05, power = 0.8)
kable(d_respondents[, .N, by = .(Assignment_Group)])
kable(attrition_table, caption = "Attrition by Stage and Feedback Type", footnote = "Random assignment occurs before Task Phase 2") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(summed_results_df)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
kable(attrition_table, caption = "Attrition by Stage and Feedback Type", footnote = "Random assignment occurs before Task Phase 2") %>%
row_spec(dim(summed_results_df)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
library(kable)
library(kableExtra)
install.packages(kableExtra)
install.packages(kableExtra)
install.packages("kableExtra")
library(kableExtra)
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
knitr::kable(attrition_table,
caption = "Attrition by Stage and Feedback Type",
footnote = "Random assignment occurs before Task Phase 2")
kable(attrition_table, caption = "Attrition by Stage and Feedback Type", footnote = "Random assignment occurs before Task Phase 2") %>%
row_spec(dim(summed_results_df)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
knitr::kable(attrition_table,
caption = "Attrition by Stage and Feedback Type",
footnote = "Random assignment occurs before Task Phase 2")
kable(attrition_table, caption = "Attrition by Stage and Feedback Type", footnote = "Random assignment occurs before Task Phase 2") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(summed_results_df)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
knitr::kable(attrition_table,
caption = "Attrition by Stage and Feedback Type",
footnote = "Random assignment occurs before Task Phase 2")
kable(attrition_table, caption = "Attrition by Stage and Feedback Type", footnote = "Random assignment occurs before Task Phase 2") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
attrition_prop_table <- as.data.frame.matrix(addmargins(round(prop.table(d_attrition[, table(Assignment_Group, Attrition_Stage)]),2)))
knitr::kable(attrition_prop_table,
caption = "Proportion of Attrition by Stage and Feedback Type",
footnote = "Random assignment occurs before Task Phase 2")
#Negative Images proportion test
prop.test(attrition_table[3,], attrition_table[6,])
#Positive Images proportion test
prop.test(attrition_table[4,], attrition_table[6,])
#before submission prop test
prop.test(attrition_table[,1], attrition_table[,5])
#before task phase 1 prop test
prop.test(attrition_table[,2], attrition_table[,5])
kable(attrition_prop_table, caption = "Attrition Proportions by Stage and Feedback Type", footnote = "Random assignment occurs before Task Phase 2") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_prop_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(general = ""Random assignment occurs before Task Phase 2"")  %>%
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2")  %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
kable(attrition_prop_table, caption = "Attrition Proportions by Stage and Feedback Type", footnote = "Random assignment occurs before Task Phase 2") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_prop_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
#Negative Images proportion test
prop.test(attrition_table[3,], attrition_table[6,])
#Positive Images proportion test
prop.test(attrition_table[4,], attrition_table[6,])
#before submission prop test
prop.test(attrition_table[,1], attrition_table[,5])
#before task phase 1 prop test
prop.test(attrition_table[,2], attrition_table[,5])
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2")  %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
kable(attrition_prop_table, caption = "Attrition Proportions by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2")  %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_prop_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
#Negative Images proportion test
prop.test(attrition_table[3,], attrition_table[6,])
#Positive Images proportion test
prop.test(attrition_table[4,], attrition_table[6,])
#before submission prop test
prop.test(attrition_table[,1], attrition_table[,5])
#before task phase 1 prop test
prop.test(attrition_table[,2], attrition_table[,5])
#table of when subjects left the experiment
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2")  %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
#when subjects left experiment in proportion to all attrition
attrition_prop_table <- as.data.frame.matrix(addmargins(round(prop.table(d_attrition[, table(Assignment_Group, Attrition_Stage)]),2)))
kable(attrition_prop_table, caption = "Attrition Proportions by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2")  %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_prop_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
#Negative Images proportion test
prop.test(attrition_table[3,], attrition_table[6,])
#Positive Images proportion test
prop.test(attrition_table[4,], attrition_table[6,])
#before submission prop test
prop.test(attrition_table[,1], attrition_table[,5])
#before task phase 1 prop test
prop.test(attrition_table[,2], attrition_table[,5])
attrition_prop_table)[1]
attrition_prop_table)[1]
attrition_prop_table)[1]
attrition_prop_table)[1]
attrition_prop_table)[1]
attrition_prop_table)[1]
#table of when subjects left the experiment
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2")  %>%
#kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
#when subjects left experiment in proportion to all attrition
attrition_prop_table <- as.data.frame.matrix(addmargins(round(prop.table(d_attrition[, table(Assignment_Group, Attrition_Stage)]),2)))
kable(attrition_prop_table, caption = "Attrition Proportions by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2")  %>%
#kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_prop_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
#Negative Images proportion test
prop.test(attrition_table[3,], attrition_table[6,])
#Positive Images proportion test
prop.test(attrition_table[4,], attrition_table[6,])
#before submission prop test
prop.test(attrition_table[,1], attrition_table[,5])
#before task phase 1 prop test
prop.test(attrition_table[,2], attrition_table[,5])
attrition_prop_table)[1]
attrition_prop_table)[1]
attrition_prop_table)[1]
attrition_prop_table)[1]
attrition_prop_table)[1]
attrition_prop_table[1]
attrition_prop_table[1]
#table of when subjects left the experiment
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2")  %>%
#kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[5], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
#table of when subjects left the experiment
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2")  %>%
#kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[5], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
#table of when subjects left the experiment
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2")  %>%
#kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[5], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
#table of when subjects left the experiment
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2")  %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[5], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
#table of when subjects left the experiment
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2")  %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
#when subjects left experiment in proportion to all attrition
attrition_prop_table <- as.data.frame.matrix(addmargins(round(prop.table(d_attrition[, table(Assignment_Group, Attrition_Stage)]),2)))
kable(attrition_prop_table, caption = "Attrition Proportions by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2")  %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_prop_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
#Negative Images proportion test
prop.test(attrition_table[3,], attrition_table[6,])
#Positive Images proportion test
prop.test(attrition_table[4,], attrition_table[6,])
#before submission prop test
prop.test(attrition_table[,1], attrition_table[,5])
#before task phase 1 prop test
prop.test(attrition_table[,2], attrition_table[,5])
#table of when subjects left the experiment
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2")  %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[5], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
#table of when subjects left the experiment
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2")  %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
#when subjects left experiment in proportion to all attrition
attrition_prop_table <- as.data.frame.matrix(addmargins(round(prop.table(d_attrition[, table(Assignment_Group, Attrition_Stage)]),2)))
kable(attrition_prop_table, caption = "Attrition Proportions by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2")  %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_prop_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
#Negative Images proportion test
prop.test(attrition_table[3,], attrition_table[6,])
#Positive Images proportion test
prop.test(attrition_table[4,], attrition_table[6,])
#before submission prop test
prop.test(attrition_table[,1], attrition_table[,5])
#before task phase 1 prop test
prop.test(attrition_table[,2], attrition_table[,5])
#table of when subjects left the experiment
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2")  %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
#when subjects left experiment in proportion to all attrition
attrition_prop_table <- as.data.frame.matrix(addmargins(round(prop.table(d_attrition[, table(Assignment_Group, Attrition_Stage)]),2)))
kable(attrition_prop_table, caption = "Attrition Proportions by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2")  %>%
kable_styling(bootstrap_options = "striped") %>%
row_spec(dim(attrition_prop_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) # format first column
#Negative Images proportion test
prop.test(attrition_table[3,], attrition_table[6,])
#Positive Images proportion test
prop.test(attrition_table[4,], attrition_table[6,])
#before submission prop test
prop.test(attrition_table[,1], attrition_table[,5])
#before task phase 1 prop test
prop.test(attrition_table[,2], attrition_table[,5])
