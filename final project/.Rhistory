knitr::opts_chunk$set(echo = TRUE)
library(foreign)
library(data.table)
library(knitr)
library(stargazer)
library(sandwich)
library(car)
d <- fread('Lungs_November+14,+2020_17.33.csv')
head(d)
d_respondents_only <- d[ Status == "IP Address" , ]
head(d_respondents_only)
#rename task phase questions
setnames(d_respondents_only,
old = c('Q2', 'Q42'),
new = c('Self_Reflect_Q1', 'Self_Reflect_Q2'))
setnames(d_respondents_only,
old = c('Q69', 'Q89'),
new = c('Control_Q1', 'Control_Q2'))
setnames(d_respondents_only,
old = c('Q80', 'Q82', 'Q83', 'Q84', 'SC0'),
new = c('Amazon_Turk_ID', 'Gender', 'Age_Range', 'Education_Level', 'Total_Score'))
setnames(d_respondents_only,
old = c('Q1', 'Q5', 'Q6', 'Q7', 'Q16', 'Q17', 'Q18', 'Q19', 'Q20', 'Q21',
'Q8', 'Q9', 'Q10', 'Q11', 'Q22', 'Q23', 'Q24', 'Q25', 'Q26', 'Q27',
'Q12', 'Q13', 'Q14', 'Q15', 'Q28', 'Q29', 'Q30', 'Q31', 'Q32', 'Q33'),
new = c('Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7', 'Q8', 'Q9', 'Q10',
'Q11', 'Q12', 'Q13', 'Q14', 'Q15', 'Q16', 'Q17', 'Q18', 'Q19', 'Q20',
'Q21', 'Q22', 'Q23', 'Q24', 'Q25', 'Q26', 'Q27', 'Q28', 'Q29', 'Q30'))
d_respondents_only[ , c("Q1_Score", "Q2_Score", "Q3_Score", "Q4_Score", "Q5_Score", "Q6_Score", "Q7_Score", "Q8_Score", "Q9_Score", "Q10_Score",
"Q11_Score", "Q12_Score", "Q13_Score", "Q14_Score", "Q15_Score", "Q16_Score", "Q17_Score", "Q18_Score",
"Q19_Score", "Q20_Score", "Q21_Score", "Q22_Score", "Q23_Score", "Q24_Score", "Q25_Score", "Q26_Score",
"Q27_Score", "Q28_Score", "Q29_Score", "Q30_Score") :=
list(ifelse(Q1 == "Normal", 1, 0),
ifelse(Q2 == "Normal", 1, 0),
ifelse(Q3 == "Pneumonia", 1, 0),
ifelse(Q4 == "Pneumonia", 1, 0),
ifelse(Q5 == "Normal", 1, 0),
ifelse(Q6 == "Pneumonia", 1, 0),
ifelse(Q7 == "Pneumonia", 1, 0),
ifelse(Q8 == "Normal", 1, 0),
ifelse(Q9 == "Pneumonia", 1, 0),
ifelse(Q10 == "Normal", 1, 0),
ifelse(Q11 == "Pneumonia", 1, 0),
ifelse(Q12 == "Normal", 1, 0),
ifelse(Q13 == "Pneumonia", 1, 0),
ifelse(Q14 == "Pneumonia", 1, 0),
ifelse(Q15 == "Normal", 1, 0),
ifelse(Q16 == "Normal", 1, 0),
ifelse(Q17 == "Pneumonia", 1, 0),
ifelse(Q18 == "Normal", 1, 0),
ifelse(Q19 == "Pneumonia", 1, 0),
ifelse(Q20 == "Normal", 1, 0),
ifelse(Q21 == "Normal", 1, 0),
ifelse(Q22 == "Normal", 1, 0),
ifelse(Q23 == "Pneumonia", 1, 0),
ifelse(Q24 == "Normal", 1, 0),
ifelse(Q25 == "Pneumonia", 1, 0),
ifelse(Q26 == "Pneumonia", 1, 0),
ifelse(Q27 == "Pneumonia", 1, 0),
ifelse(Q28 == "Pneumonia", 1, 0),
ifelse(Q29 == "Normal", 1, 0),
ifelse(Q30 == "Normal", 1, 0))]
d_respondents_only[ , c("TaskPhase1_Score", "TaskPhase2_Score", "TaskPhase3_Score") :=
list(sum(Q1_Score, Q2_Score, Q3_Score, Q4_Score, Q5_Score, Q6_Score, Q7_Score, Q8_Score, Q9_Score, Q10_Score),
sum(Q11_Score, Q12_Score, Q13_Score, Q14_Score, Q15_Score, Q16_Score, Q17_Score, Q18_Score, Q19_Score, Q20_Score),
sum(Q21_Score, Q22_Score, Q23_Score, Q24_Score, Q25_Score, Q26_Score, Q27_Score, Q28_Score, Q29_Score, Q30_Score)),
by = Amazon_Turk_ID]
head(d_respondents_only)
d <- fread('Lungs_November+14,+2020_17.33.csv')
head(d)
d_respondents_only <- d[ Status == "IP Address" , ]
head(d_respondents_only)
#rename task phase questions
setnames(d_respondents_only,
old = c('Q2', 'Q42'),
new = c('Self_Reflect_Q1', 'Self_Reflect_Q2'))
setnames(d_respondents_only,
old = c('Q69', 'Q89'),
new = c('Control_Q1', 'Control_Q2'))
setnames(d_respondents_only,
old = c('Q80', 'Q82', 'Q83', 'Q84', 'SC0', 'FL_6_DO'),
new = c('Amazon_Turk_ID', 'Gender', 'Age_Range', 'Education_Level', 'Total_Score', 'Assignment'))
setnames(d_respondents_only,
old = c('Q1', 'Q5', 'Q6', 'Q7', 'Q16', 'Q17', 'Q18', 'Q19', 'Q20', 'Q21',
'Q8', 'Q9', 'Q10', 'Q11', 'Q22', 'Q23', 'Q24', 'Q25', 'Q26', 'Q27',
'Q12', 'Q13', 'Q14', 'Q15', 'Q28', 'Q29', 'Q30', 'Q31', 'Q32', 'Q33'),
new = c('Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7', 'Q8', 'Q9', 'Q10',
'Q11', 'Q12', 'Q13', 'Q14', 'Q15', 'Q16', 'Q17', 'Q18', 'Q19', 'Q20',
'Q21', 'Q22', 'Q23', 'Q24', 'Q25', 'Q26', 'Q27', 'Q28', 'Q29', 'Q30'))
d_respondents_only[ , c("Q1_Score", "Q2_Score", "Q3_Score", "Q4_Score", "Q5_Score", "Q6_Score", "Q7_Score", "Q8_Score", "Q9_Score", "Q10_Score",
"Q11_Score", "Q12_Score", "Q13_Score", "Q14_Score", "Q15_Score", "Q16_Score", "Q17_Score", "Q18_Score",
"Q19_Score", "Q20_Score", "Q21_Score", "Q22_Score", "Q23_Score", "Q24_Score", "Q25_Score", "Q26_Score",
"Q27_Score", "Q28_Score", "Q29_Score", "Q30_Score") :=
list(ifelse(Q1 == "Normal", 1, 0),
ifelse(Q2 == "Normal", 1, 0),
ifelse(Q3 == "Pneumonia", 1, 0),
ifelse(Q4 == "Pneumonia", 1, 0),
ifelse(Q5 == "Normal", 1, 0),
ifelse(Q6 == "Pneumonia", 1, 0),
ifelse(Q7 == "Pneumonia", 1, 0),
ifelse(Q8 == "Normal", 1, 0),
ifelse(Q9 == "Pneumonia", 1, 0),
ifelse(Q10 == "Normal", 1, 0),
ifelse(Q11 == "Pneumonia", 1, 0),
ifelse(Q12 == "Normal", 1, 0),
ifelse(Q13 == "Pneumonia", 1, 0),
ifelse(Q14 == "Pneumonia", 1, 0),
ifelse(Q15 == "Normal", 1, 0),
ifelse(Q16 == "Normal", 1, 0),
ifelse(Q17 == "Pneumonia", 1, 0),
ifelse(Q18 == "Normal", 1, 0),
ifelse(Q19 == "Pneumonia", 1, 0),
ifelse(Q20 == "Normal", 1, 0),
ifelse(Q21 == "Normal", 1, 0),
ifelse(Q22 == "Normal", 1, 0),
ifelse(Q23 == "Pneumonia", 1, 0),
ifelse(Q24 == "Normal", 1, 0),
ifelse(Q25 == "Pneumonia", 1, 0),
ifelse(Q26 == "Pneumonia", 1, 0),
ifelse(Q27 == "Pneumonia", 1, 0),
ifelse(Q28 == "Pneumonia", 1, 0),
ifelse(Q29 == "Normal", 1, 0),
ifelse(Q30 == "Normal", 1, 0))]
d_respondents_only[ , c("TaskPhase1_Score", "TaskPhase2_Score", "TaskPhase3_Score") :=
list(sum(Q1_Score, Q2_Score, Q3_Score, Q4_Score, Q5_Score, Q6_Score, Q7_Score, Q8_Score, Q9_Score, Q10_Score),
sum(Q11_Score, Q12_Score, Q13_Score, Q14_Score, Q15_Score, Q16_Score, Q17_Score, Q18_Score, Q19_Score, Q20_Score),
sum(Q21_Score, Q22_Score, Q23_Score, Q24_Score, Q25_Score, Q26_Score, Q27_Score, Q28_Score, Q29_Score, Q30_Score)),
by = Amazon_Turk_ID]
head(d_respondents_only)
d_respondents_only[ , Assignment_Group := ifelse(Assignment == "FL_17", "Control",
ifelse(Assignment == "FL_14", "Self-Reflect",
ifelse(Assignment == "FL_15", "Medical Feedback",
ifelse(Assignment == "FL_16", "Positive Images", "Negative Images"))))]
head(d_respondents_only)
#install.packages("ggmap")
library(ggmap)
install.packages("revgeo")
library(revgeo)
d_respondents_only[ , c("housenumber", "street", "city", "county", "state", "zip", "country") := revgeo(as.numeric(LocationLongitude),as.numeric(LocationLatitude), provider = 'google', API = "AIzaSyCTk2a5vIEqcvgz9KmQmItoNF7J8_hiMMk", output='frame')]
head(d_respondents_only)
fwrite(d_respondents_only, file='datatable_clean_survey_responses.dta')
d_respondents <- fread('datatable_clean_survey_responses.dta')
head(d_respondents)
d_respondents %>% group_by(Total_Score) %>% summarise(count)
library(dplyr)
d_respondents %>% group_by(Total_Score) %>% summarise(count)
table(d_respondents$Total_Score) %>%
as.data.frame() %>%
arrange(desc(Freq))
table(d_respondents$Total_Score) %>%
as.data.frame() %>%
arrange(desc(Var1))
table(d_respondents$state, d_respondents$country) %>%
as.data.frame() %>%
arrange(desc(Freq))
#some EDA
#d_respondents[ , table(state, country)]
table(d_respondents$state, d_respondents$country) %>%
as.data.frame() %>%
arrange(desc(Freq))
table(d_respondents$country) %>%
as.data.frame() %>%
arrange(desc(Freq))
table(d_respondents$Assignment_Group) %>%
as.data.frame() %>%
arrange(desc(Var1))
table(d_respondents$Total_Score, d_respondents$Assignment_Group) %>%
as.data.frame() %>%
arrange(desc(Var1))
d_respondents[ , .(count = .N, avg = average(Total_Score)), by=Assignment_Group]
d_respondents[ , .(count = .N, avg = avg(Total_Score)), by=Assignment_Group]
d_respondents[ , .(count = .N, avg = mean(Total_Score)), by=Assignment_Group]
knitr::opts_chunk$set(echo = TRUE)
library(foreign)
library(data.table)
library(knitr)
library(stargazer)
library(sandwich)
library(car)
d_respondents <- fread('datatable_clean_survey_responses.dta')
head(d_respondents)
?duplicated
duplicated(d_respondents$Amazon_Turk_ID)
d_respondents[ duplicated(d_respondents$Amazon_Turk_ID), ]
d_respondents[ duplicated(d_respondents$Amazon_Turk_ID) == FALSE, ]
nrow(d_respondents)
d_respondents[ duplicated(d_respondents$Amazon_Turk_ID) == FALSE, ]
duplicated(d_respondents$Amazon_Turk_ID)
d_respondents[ !duplicated(d_respondents$Amazon_Turk_ID) , ]
d_respondents <- d_respondents[ !duplicated(d_respondents$Amazon_Turk_ID) , ]  #378 rows
#some EDA
#d_respondents[ , table(state, country)]
table(d_respondents$state, d_respondents$country) %>%
as.data.frame() %>%
arrange(desc(Freq))
library(dplyr)
#some EDA
#d_respondents[ , table(state, country)]
table(d_respondents$state, d_respondents$country) %>%
as.data.frame() %>%
arrange(desc(Freq))
table(d_respondents$country) %>%
as.data.frame() %>%
arrange(desc(Freq))
table(d_respondents$Total_Score) %>%
as.data.frame() %>%
arrange(desc(Var1))
d_respondents[ , hist(Total_Score)]
summary(d_respondents$Total_Score)
?tapply
tapply(d_respondents$Total_Score, d_respondents$Assignment_Group, summary)
table(d_respondents$Total_Score) %>%
as.data.frame() %>%
arrange(desc(Var1))
d_respondents[ , hist(Total_Score)]
tapply(d_respondents$Total_Score, d_respondents$Assignment_Group, summary)
tapply(d_respondents$Total_Score, d_respondents$Assignment_Group, c(summary, count))
tapply(d_respondents$Total_Score, d_respondents$Assignment_Group, summary)
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(mean = mean(Total_Score),
count = .N)
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(mean = mean(Total_Score),
count = count(Total_Score))
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(mean = mean(Total_Score),
count = tally())
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(mean = mean(Total_Score),
count = n())
table(d_respondents$Total_Score) %>%
as.data.frame() %>%
arrange(desc(Var1))
table(d_respondents$Total_Score) %>%
as.data.frame() %>%
arrange(desc(Var1))
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(mean = mean(Total_Score),
count = n())
d_respondents[ , hist(Total_Score)]
tapply(d_respondents$Total_Score, d_respondents$Assignment_Group, summary)
table(d_respondents$Assignment_Group) %>%
as.data.frame() %>%
arrange(desc(Var1))
d_respondents[ , .(count = .N, avg = mean(Total_Score)), by=Assignment_Group]
summary(d_respondents)
summary(d_respondents$Gender)
d_respondents$Gender
d_respondents.Gender
$
d_respondents$Gender
d_respondents %>% group_by(Assignment_Group) %>%
summarise(num_respondents = n(),
pre-treatment_avg = mean(TaskPhase1_Score))
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(num_respondents = n(),
pre_treatment_avg = mean(TaskPhase1_Score))
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(num_respondents = n(),
pre_treatment_avg = mean(TaskPhase1_Score),
taskphase2_avg = mean(TaskPhase2_Score),
taskphase3_avg = mean(TaskPhase3_Score))
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(num_respondents = n(),
avg_age = mean(Age_Range),
pre_treatment_avg = mean(TaskPhase1_Score),
taskphase2_avg = mean(TaskPhase2_Score),
taskphase3_avg = mean(TaskPhase3_Score))
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(num_respondents = n(),
pre_treatment_avg = mean(TaskPhase1_Score),
taskphase2_avg = mean(TaskPhase2_Score),
taskphase3_avg = mean(TaskPhase3_Score))
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(num_respondents = n(),
males = count(Gender=="Male"),
pre_treatment_avg = mean(TaskPhase1_Score),
taskphase2_avg = mean(TaskPhase2_Score),
taskphase3_avg = mean(TaskPhase3_Score))
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(num_respondents = n(),
pre_treatment_avg = mean(TaskPhase1_Score),
taskphase2_avg = mean(TaskPhase2_Score),
taskphase3_avg = mean(TaskPhase3_Score))
d_respondents[ , table(Assignment_Group, Gender)]
d_respondents[ , table(Assignment_Group, Age)]
d_respondents[ , table(Assignment_Group, Age_Range)]
d_respondents[ , table(Assignment_Group, Education_Level)]
#check balance between age-range, education, age
d_respondents[ , table(Assignment_Group, Gender)]
d_respondents[ , table(Assignment_Group, Age_Range)]
d_respondents[ , table(Assignment_Group, Education_Level)]
with(d_respondents, t.test(mean(d_respondents$TaskPhase1_Score) ~ d_respondents$Assignment_Group))
d_respondents %>%
select(TaskPhase1_Score, Assignment_Group) %>%
gather(key = variable, value=value, ~Assignment_Group) %>%
group_by(Assignment_Group, variable) %>%
summarise(value = list(value)) %>%
spread(Assignment_Group, value) %>%
group_by(variable) %>%
mutate(p_value = t.test(unlist(Control), unlist(Medical Feedback), unlist(Negative Images), unlist(Positive Images),
d_respondents[ , .(.N), keyby=Assignment]
d_respondents[ , .(.N), keyby=Assignment_Group]
d_respondents[ , .(.N), keyby=Assignment_Group][2]
d_respondents[ , .(.N), keyby=Assignment_Group][,5]
d_respondents[ , .(.N), keyby=Assignment_Group][,]
d_respondents[ , .(.N), keyby=Assignment_Group][,1]
d_respondents[ , .(.N), keyby=Assignment_Group][2,]
d_respondents[ , .(.N), keyby=Assignment_Group][1,]
d_respondents[ , .(.N), keyby=Assignment_Group][,1]
d_respondents[ , .(.N), keyby=Assignment_Group][,2]
chisq.test(d_respondents[ , .(.N), keyby=Assignment_Group][,2], p=c(1/5, 1/5, 1/5, 1/5, 1/5))
?chisq.test
respondent_counts <- d_respondents[ , .(.N), keyby=Assignment_Group][,2]
respondent_counts_chisq_test <- chisq.test(respondent_counts, p=c(1/5, 1/5, 1/5, 1/5, 1/5))
respondent_counts_chisq_test$expected
respondent_counts_chisq_test
#check balance between age-range, education, age
d_respondents[ , table(Assignment_Group, Gender)]
d_respondents[ , table(Assignment_Group, Age_Range)]
d_respondents[ , table(Assignment_Group, Education_Level)]
d_respondents[ , lm(Total_Score ~ Assignment_Group)]
d_respondents[ , lm(Total_Score ~ Assignment_Group + Education_Level)]
d_respondents[ , lm(Total_Score ~ Education_Level)]
library(AER)
d_respondents[ , ivreg(Total_Score ~ Assignment_Group | Education_Level)]
d_respondents[ , ivreg(Total_Score ~ Education_Level | Assignment_Group)]
table(d_respondents$Total_Score) %>%
as.data.frame() %>%
arrange(desc(Var1))
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(mean = mean(Total_Score),
count = n(),
time_duration = mean(`Duration (in seconds)`))
#d_respondents[ , .(count = .N, avg = mean(Total_Score)), by=Assignment_Group] #same thing
d_respondents[ , hist(Total_Score)]
tapply(d_respondents$Total_Score, d_respondents$Assignment_Group, summary)
library(AER)
d_respondents[ , lm(Total_Score ~ Education_Level)]
d_respondents[ , ivreg(Total_Score ~ Education_Level | Assignment_Group)]
?power.t.test
power.t.test(70, 5, 2, 0.05, power=0.8)
power.t.test(n, 5, 2, 0.05, power=0.8)
power.t.test(, delta = 5, sd=1, sig.level = 0.05, power=0.8)
power.t.test( delta = 5, sd=1, sig.level = 0.05, power=0.8)
power.t.test( delta = 1.5, sd=1, sig.level = 0.05, power=0.8)
power.t.test( delta = 1.5, sd=1, sig.level = 0.05, power=0.9)
tapply(d_respondents$Total_Score, d_respondents$Assignment_Group, sd)
power.t.test( delta = 1.5, sd=4, sig.level = 0.05, power=0.9)
power.t.test( delta = 1.5, sd=3.5, sig.level = 0.05, power=0.9)
power.t.test( delta = 1.5, sd=3.5, sig.level = 0.05, power=0.8)
d_respondents[ , sd(Total_Score)]
power.t.test( delta = 1.5, sd=3.78, sig.level = 0.05, power=0.8)
d_respondents[ , Treatment_Dummy := ifelse(Assignment_Group != "Control", 1, 0)]
head(d_respondents)
d_respondents[ Treatment_Dummy == 1, mean(Total_Score)] - d_respondents[ Treatment_Dummy == 0, mean(Total_Score)]
power.t.test( delta = 0.62, sd=3.78, sig.level = 0.05, power=0.8)
?power.t.test
power.t.test( delta = 2, sd=3.78, sig.level = 0.05, power=0.8)
power.t.test( delta = 1.2, sd=3.78, sig.level = 0.05, power=0.8)
