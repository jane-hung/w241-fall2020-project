#Comparing pretreatment values
ggplot(d_respondents, aes(x=TaskPhase2_Score, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) + geom_density(alpha = 0.2)
#Comparing taskphase2 values
ggplot(d_respondents, aes(x=TotalScore, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) + geom_density(alpha = 0.2)
#Comparing taskphase2 values
ggplot(d_respondents, aes(x=Total_Score, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) + geom_density(alpha = 0.2)
ggplot(d_respondents, aes(x=Total_Score, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) + geom_boxplot()
ggplot(d_respondents, aes(x=TaskPhase2_Score, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) + geom_boxplot()
ggplot(d_respondents, aes(x=TaskPhase2_Score, colour=as.factor(Assignment_Group))) + geom_boxplot()
ggplot(d_respondents, aes(x=as.factor(Assignment_Group), y = TaskPhase2_Score, colour=as.factor(Assignment_Group))) + geom_boxplot()
ggplot(d_respondents, aes(x=as.factor(Assignment_Group), y = TaskPhase2_Score)) + geom_boxplot()
#Comparing taskphase2 values
ggplot(d_respondents, aes(x=Total_Score, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) + geom_density(alpha = 0.2)
#Comparing taskphase2 values
ggplot(d_respondents, aes(x=TaskPhase2_Score, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) + geom_density(alpha = 0.2)
ggplot(d_respondents, aes(x=as.factor(Assignment_Group), y = TaskPhase2_Score)) + geom_boxplot()
ggplot(d_respondents, aes(x=as.factor(Assignment_Group), y = TaskPhase2_Score), colour = Assignment_Group) + geom_boxplot()
ggplot(d_respondents, aes(x=as.factor(Assignment_Group), y = TaskPhase2_Score), colour = as.factor(Assignment_Group)) + geom_boxplot()
ggplot(d_respondents, aes(x=as.factor(Assignment_Group), y = TaskPhase2_Score), colour = as.factor(Assignment_Group)) + geom_boxplot()
ggplot(d_respondents, aes(x=Total_Score, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) + geom_boxplot()
ggplot(d_respondents, aes(x=TaskPhase2_Score, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) + geom_boxplot()
ggplot(d_respondents, aes(x=TaskPhase2_Score, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) + geom_boxplot() + theme(axis.text.x = element_text(angle-75, hjust=1))
ggplot(d_respondents, aes(x=TaskPhase2_Score, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) + geom_boxplot() + theme(axis.text.x = element_text(angle=75, hjust=1))
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(num_respondents = n(),
pre_treatment_avg = mean(TaskPhase1_Score),
taskphase2_avg = mean(TaskPhase2_Score),
taskphase3_avg = mean(TaskPhase3_Score))
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(num_respondents = n(),
avg_age_bin = mean(age_bin),
avg_edu_bin = mean(edu_bin),
male = mean(Male_Dummy),
US = mean(US_Dummy))
ggplot(d_respondents, aes(x=TaskPhase2_Score, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) + geom_boxplot()
ggplot(d_respondents, aes(x=TaskPhase2_Score, colour=as.factor(Assignment_Group))) + geom_boxplot()
ggplot(d_respondents, aes(x=TaskPhase1_Score, colour=as.factor(Assignment_Group))) + geom_boxplot()
ggplot(d_respondents, aes(x=TaskPhase3_Score, colour=as.factor(Assignment_Group))) + geom_boxplot()
ggplot(d_respondents, aes(x=TaskPhase2_Score, colour=as.factor(Assignment_Group))) + geom_boxplot()
ggplot(d_respondents, aes(y=TaskPhase1_Score, colour=as.factor(Assignment_Group))) + geom_boxplot()
ggplot(d_respondents, aes(y=TaskPhase2_Score, colour=as.factor(Assignment_Group))) + geom_boxplot()
ggplot(d_respondents, aes(y=TaskPhase2_Score, colour=as.factor(Treatment_Dummy))) + geom_boxplot()
ggplot(d_respondents, aes(x=TaskPhase2_Score, fill = as.factor(Treatment_Dummy)))
ggplot(d_respondents, aes(x=TaskPhase2_Score, fill = as.factor(Treatment_Dummy))) + geom_histogram(binwidth=30)
ggplot(d_respondents, aes(x=TaskPhase2_Score, y = ..density.., fill = as.factor(Treatment_Dummy))) + geom_histogram(binwidth=30)
ggplot(d_respondents, aes(x=TaskPhase2_Score, y = ..density.., fill = Treatment_Dummy)) + geom_histogram(binwidth=30)
ggplot(d_respondents, aes(x=TaskPhase2_Score, y = ..density.., colour = Treatment_Dummy)) + geom_histogram(binwidth=30)
ggplot(d_respondents, aes(x=TaskPhase2_Score, y = ..density.., colour = as.factor(Treatment_Dummy))) + geom_histogram(binwidth=30)
ggplot(d_respondents, aes(x=TaskPhase2_Score, y = ..density.., colour = as.factor(Treatment_Dummy))) + geom_histogram(binwidth=30, position = "dodge")
ggplot(d_respondents, aes(x=TaskPhase2_Score, y = ..density.., colour = as.factor(Treatment_Dummy))) + geom_histogram(binwidth=0.5, position = "dodge")
ggplot(d_respondents, aes(x=TaskPhase2_Score, y = ..density.., colour = as.factor(Treatment_Dummy))) + geom_histogram(binwidth=0.1, position = "dodge")
ggplot(d_respondents, aes(x=TaskPhase2_Score, y = ..density.., fill = as.factor(Treatment_Dummy))) + geom_histogram(binwidth=0.1, position = "dodge")
ggplot(d_respondents, aes(x=TaskPhase2_Score, y = ..density.., fill = as.factor(Treatment_Dummy))) + geom_histogram(binwidth=0.05, position = "dodge")
ggplot(d_respondents, aes(x=TaskPhase2_Score, y = ..density.., fill = as.factor(Treatment_Dummy))) + geom_histogram(binwidth=0.01, position = "dodge")
ggplot(d_respondents, aes(x=TaskPhase2_Score, y = ..density.., fill = as.factor(Treatment_Dummy))) + geom_histogram(binwidth=0.1, position = "dodge")
ggplot(d_respondents, aes(x=TaskPhase2_Score, y = ..density.., fill = as.factor(Assignment_Group))) + geom_histogram(binwidth=0.1, position = "dodge")
ggplot(d_respondents, aes(x=c(TaskPhase1_Score, TaskPhase2_Score, TaskPhase3_Score), y=..mean.., group=as.factor(Assignment_Group), color=as.factor(Assignment_Group)))
ggplot(d_respondents, aes( y=TaskPhase2_Score, group=as.factor(Assignment_Group), color=as.factor(Assignment_Group)))
#Density distribution of Survey Duration
ggplot(d_respondents, aes(x=Survey_Duration, colour=Assignment_Group)) + geom_density() + xlim(0, 1500) + xlab("Completion Time (seconds)")
#Density distribution of Survey Duration
ggplot(d_respondents, aes(x=Survey_Duration, colour=Assignment_Group)) + geom_density(alpha = 0.1) + xlim(0, 1500) + xlab("Completion Time (seconds)")
#Density distribution of Survey Duration
ggplot(d_respondents, aes(x=Survey_Duration, colour=Assignment_Group)) + geom_density(alpha = 0.3) + xlim(0, 1500) + xlab("Completion Time (seconds)")
#Comparing pretreatment values
ggplot(d_respondents, aes(x=TaskPhase1_Score, fill = as.factor(Treatment_Dummy), colour=as.factor(Treatment_Dummy))) + geom_density(alpha = 0.3)
#Density distribution of Survey Duration
ggplot(d_respondents, aes(x=Survey_Duration, colour=Assignment_Group), fill = as.factor(Assignment_Group)) + geom_density(alpha = 0.3) + xlim(0, 1500) + xlab("Completion Time (seconds)")
#Density distribution of Survey Duration
ggplot(d_respondents, aes(x=Survey_Duration, colour=as.factor(Assignment_Group)), fill = as.factor(Assignment_Group)) + geom_density(alpha = 0.3) + xlim(0, 1500) + xlab("Completion Time (seconds)")
#Comparing pretreatment values
ggplot(d_respondents, aes(x=TaskPhase1_Score, fill = as.factor(Treatment_Dummy), colour=as.factor(Treatment_Dummy))) + geom_density(alpha = 0.3)
#Density distribution of Survey Duration
ggplot(d_respondents, aes(x=Survey_Duration, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_density(alpha = 0.3) + xlim(0, 1500) + xlab("Completion Time (seconds)")
#Comparing pretreatment values
ggplot(d_respondents, aes(x=TaskPhase1_Score, fill = as.factor(Treatment_Dummy), colour=as.factor(Treatment_Dummy))) + geom_density(alpha = 0.3)
#Comparing taskphase2 values
ggplot(d_respondents, aes(x=TaskPhase2_Score, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) + geom_density(alpha = 0.2)
#Comparing taskphase3 values
ggplot(d_respondents, aes(x=TaskPhase3_Score, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) + geom_density(alpha = 0.2)
#boxplots for TaskPhase3 values
ggplot(d_respondents, aes(y=TaskPhase3_Score, colour=as.factor(Treatment_Dummy))) + geom_boxplot()
ggplot(d_respondents, aes(y=TaskPhase3_Score, colour=as.factor(Treatment_Dummy))) + geom_boxplot() + stat_summary(fun.y = mean, geom = "errorbar", aes(ymax == ..y.., ymin=..y..), width = 0.75, linetype = "dashed")
ggplot(d_respondents, aes(y=TaskPhase3_Score, colour=as.factor(Treatment_Dummy))) + geom_boxplot()
ggplot(d_respondents, aes(x = Treatment_Dummy, y=TaskPhase3_Score, colour=as.factor(Treatment_Dummy))) + geom_boxplot()
ggplot(d_respondents, aes(x = Treatment_Dummy, y=TaskPhase3_Score, colour=as.factor(Treatment_Dummy))) + geom_boxplot() + stat_summary(fun.y = mean, geom = "errorbar", aes(ymax == ..y.., ymin=..y..), width = 0.75, linetype = "dashed")
ggplot(d_respondents, aes(x = Treatment_Dummy, y=TaskPhase3_Score, colour=as.factor(Treatment_Dummy))) + geom_boxplot() + stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..),
width = .75, linetype = "dashed")
ggplot(d_respondents, aes(y=TaskPhase2_Score, colour=as.factor(Treatment_Dummy))) + geom_boxplot() + stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..),
width = .75, linetype = "dashed")
#boxplots for TaskPhase2 values
ggplot(d_respondents, aes(x = Treatment_Dummy, y=TaskPhase2_Score, colour=as.factor(Treatment_Dummy))) + geom_boxplot() + stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..),
width = .75, linetype = "dashed")
#boxplots for pretreatment values
ggplot(d_respondents, aes(y=TaskPhase1_Score, colour=as.factor(Assignment_Group))) + geom_boxplot()
#boxplots for pretreatment values
ggplot(d_respondents, aes(x = Assignment_Group, y=TaskPhase1_Score, colour=as.factor(Assignment_Group))) + geom_boxplot() + stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..),
width = .75, linetype = "dashed")
#boxplots for pretreatment values
ggplot(d_respondents, aes(x = Assignment_Group, y=TaskPhase1_Score, colour=as.factor(Assignment_Group))) + geom_boxplot() + stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..),
width = .75, linetype = "dashed") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#boxplots for pretreatment values
ggplot(d_respondents, aes(x = Assignment_Group, y=TaskPhase1_Score, colour=as.factor(Assignment_Group))) + geom_boxplot() + stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..),
width = .75, linetype = "dashed") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
#boxplots for pretreatment values
ggplot(d_respondents, aes(x = Assignment_Group, y=TaskPhase1_Score, colour=as.factor(Assignment_Group))) + geom_boxplot() + stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..),
width = .75, linetype = "dashed") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.0, hjust=1))
#boxplots for pretreatment values
ggplot(d_respondents, aes(x = Assignment_Group, y=TaskPhase1_Score, colour=as.factor(Assignment_Group))) + geom_boxplot() + stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..),
width = .75, linetype = "dashed") +
theme(axis.text.x = element_text(angle = 45, vjust = 1.5, hjust=1))
#boxplots for pretreatment values
ggplot(d_respondents, aes(x = Assignment_Group, y=TaskPhase1_Score, colour=as.factor(Assignment_Group))) + geom_boxplot() + stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..),
width = .75, linetype = "dashed") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
#Comparing pretreatment values
ggplot(d_respondents, aes(x=TaskPhase1_Score, fill = as.factor(Treatment_Dummy), colour=as.factor(Treatment_Dummy))) + geom_density(alpha = 0.3)
ggplot(d_respondents, aes(x=TaskPhase1_Score, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) + geom_density(alpha = 0.3)
#Comparing taskphase2 values
ggplot(d_respondents, aes(x=TaskPhase2_Score, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) + geom_density(alpha = 0.2) + ggtitle("TaskPhase2 Scores by Group")
#Comparing taskphase2 values
ggplot(d_respondents, aes(x=TaskPhase2_Score, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) + geom_density(alpha = 0.2) + ggtitle("TaskPhase2 Scores by Group") + theme(plot.title = element_text(hjust = 0.5))
#boxplots for pretreatment values
ggplot(d_respondents, aes(x = Assignment_Group, y=TaskPhase1_Score, colour=as.factor(Assignment_Group))) + geom_boxplot() + stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..),
width = .75, linetype = "dashed") + ggtitle("PreTreatment Values") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
#boxplots for pretreatment values
ggplot(d_respondents, aes(x = Assignment_Group, y=TaskPhase1_Score, colour=as.factor(Assignment_Group))) + geom_boxplot() + stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..),
width = .75, linetype = "dashed") + ggtitle("PreTreatment Values") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + theme(plot.title = element_text(hjust = 0.5))
#check balance between age-range, education, age
d_respondents[ , table(Assignment_Group, Gender)]
chisq.test(d_respondents[ , table(Assignment_Group, Gender)])
d_respondents[ , table(Assignment_Group, Age_Range)]
# expected frequency count for each cell of the contingency table should be at least 5. Since this is not the case, we set simulate.p.value as a version of the Fisher exact test
# https://stats.stackexchange.com/questions/81483/warning-in-r-chi-squared-approximation-may-be-incorrect
chisq.test(d_respondents[ , table(Assignment_Group, Age_Range)],simulate.p.value = TRUE)
d_respondents[ , table(Assignment_Group, Education_Level)]
chisq.test(d_respondents[ , table(Assignment_Group, Education_Level)],simulate.p.value = TRUE)
d_respondents[ , table(Assignment_Group, US_Dummy)]
chisq.test(d_respondents[ , table(Assignment_Group, US_Dummy)],simulate.p.value = TRUE)
install.packages("formattable")
library(formattable)
#check balance between age-range, education, age
formattable(d_respondents[ , table(Assignment_Group, Gender)])
d_respondents[ , table(Assignment_Group, Gender)]
?formattable
library(gridExtra)
install.packages("gridExtra")
install.packages("grid")
library(grid)
library(gridExtra)
library(grid)
#check balance between age-range, education, age
grid.table(d_respondents[ , table(Assignment_Group, Gender)])
#check balance between age-range, education, age
tableGrob(d_respondents[ , table(Assignment_Group, Gender)])
install.packages("datatable")
install.packages("datatable")
install.packages("datatable")
install.packages("datatable")
knitr::opts_chunk$set(echo = TRUE)
install.packages("datatable")
install.packages("expss")
library(expss)
library(foreign)
library(data.table)
library(knitr)
library(stargazer)
library(sandwich)
library(car)
library(dplyr)
library(ggmap)
library(revgeo)
library(AER)
library(ggplot2)
library(expss)
# clears workspace
rm(list = ls())
# ?register_google
# register_google(key = "AIzaSyCTk2a5vIEqcvgz9KmQmItoNF7J8_hiMMk")
#
# #uses Google API to obtain location data based on longitude and latitude....dont use unless necessary for new data
# d_respondents_only[ , c("housenumber", "street", "city", "county", "state", "zip", "country") := revgeo(as.numeric(LocationLongitude),as.numeric(LocationLatitude), provider = 'google', API = "AIzaSyCTk2a5vIEqcvgz9KmQmItoNF7J8_hiMMk", output='frame')]
# #
# head(d_respondents_only)
# #
# #
# fwrite(d_respondents_only, file='datatable_clean_survey_responses_v2.dta')
d_respondents <- fread('datatable_clean_survey_responses_v2.dta')
setnames(d_respondents,
old = c('Duration (in seconds)'),
new = c('Survey_Duration'))
head(d_respondents)
#some EDA
#d_respondents[ , table(state, country)]
table(d_respondents$state, d_respondents$country) %>%
as.data.frame() %>%
arrange(desc(Freq)) %>%
filter(Freq>0)
table(d_respondents$country) %>%
as.data.frame() %>%
arrange(desc(Freq))
table(d_respondents$Total_Score) %>%
as.data.frame() %>%
arrange(desc(Var1))
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(mean = mean(Total_Score),
count = n(),
time_duration = mean(Survey_Duration))
#d_respondents[ , .(count = .N, avg = mean(Total_Score)), by=Assignment_Group] #same thing
d_respondents[ , hist(Total_Score)]
tapply(d_respondents$Total_Score, d_respondents$Assignment_Group, summary)
tapply(d_respondents$Total_Score, d_respondents$Assignment_Group, sd)
d_respondents[ , sd(Total_Score)]
#http://www.sthda.com/english/wiki/chi-square-goodness-of-fit-test-in-r
respondent_counts <- d_respondents[ , .(.N), keyby=Assignment_Group][,2]
respondent_counts_chisq_test <- chisq.test(respondent_counts, p=c(1/5, 1/5, 1/5, 1/5, 1/5))
respondent_counts_chisq_test
#p-value = 0.9991, which is greater than significance level of 0.05.
#We can conclude that the observed proportions are not significantly different from the expected proportions
#let's consider adding age bins and education bins
d_respondents[ Age_Range == "18-24", age_bin := 1]
d_respondents[ Age_Range == "25-34", age_bin := 2]
d_respondents[ Age_Range == "35-44", age_bin := 3]
d_respondents[ Age_Range == "45-54", age_bin := 4]
d_respondents[ Age_Range == "55-64", age_bin := 5]
d_respondents[ Age_Range == "Above 65", age_bin := 6]
d_respondents[ Education_Level == "Associate's degree", edu_bin := 1]
d_respondents[ Education_Level == "Bachelor's degree", edu_bin := 2]
d_respondents[ Education_Level == "High school", edu_bin := 3]
d_respondents[ Education_Level == "Master's degree and above", edu_bin := 4]
d_respondents[ Education_Level == "Some high school", edu_bin := 5]
d_respondents[ Education_Level == "Trade school", edu_bin := 6]
d_respondents[ Assignment_Group == "Control", assign_bin := 1]
d_respondents[ Assignment_Group == "Medical Feedback", assign_bin := 2]
d_respondents[ Assignment_Group == "Negative Images", assign_bin := 3]
d_respondents[ Assignment_Group == "Positive Images", assign_bin := 4]
d_respondents[ Assignment_Group == "Self-Reflect", assign_bin := 5]
d_respondents[ , US_Dummy := ifelse(country == "United States", 1, 0)]
d_respondents[ , Male_Dummy := ifelse(Gender == "Male", 1, 0)]
#add treatment dummy
d_respondents[ , Treatment_Dummy := ifelse(Assignment_Group != "Control", 1, 0)]
#head(d_respondents)
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(num_respondents = n(),
pre_treatment_avg = mean(TaskPhase1_Score),
taskphase2_avg = mean(TaskPhase2_Score),
taskphase3_avg = mean(TaskPhase3_Score))
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(num_respondents = n(),
avg_age_bin = mean(age_bin),
avg_edu_bin = mean(edu_bin),
male = mean(Male_Dummy),
US = mean(US_Dummy))
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(num_respondents = n(),
)
#check balance between age-range, education, age
cro(d_respondents[ , table(Assignment_Group, Gender)])
cro(d_respondents$Assignment_Group, d_respondents$Gender)
#check balance between age-range, education, age
d_respondents[ , table(Assignment_Group, Gender)]
cro(d_respondents$Assignment_Group, d_respondents$Gender)
?cro
knitr::opts_chunk$set(echo = TRUE)
library(foreign)
library(data.table)
library(knitr)
library(stargazer)
library(sandwich)
library(car)
library(dplyr)
library(ggmap)
library(revgeo)
library(AER)
library(ggplot2)
library(expss)
library(grid)
library(gridExtra)
library(pander)
# ?register_google
# register_google(key = "AIzaSyCTk2a5vIEqcvgz9KmQmItoNF7J8_hiMMk")
#
# #uses Google API to obtain location data based on longitude and latitude....dont use unless necessary for new data
# d_respondents_only[ , c("housenumber", "street", "city", "county", "state", "zip", "country") := revgeo(as.numeric(LocationLongitude),as.numeric(LocationLatitude), provider = 'google', API = "AIzaSyCTk2a5vIEqcvgz9KmQmItoNF7J8_hiMMk", output='frame')]
# #
# head(d_respondents_only)
# #
# #
# fwrite(d_respondents_only, file='datatable_clean_survey_responses_v2.dta')
d_respondents <- fread('datatable_clean_survey_responses_v2.dta')
setnames(d_respondents,
old = c('Duration (in seconds)'),
new = c('Survey_Duration'))
head(d_respondents)
create_heatmap <- function(var1, var2) {
### Create a heatmap for a table of frequencies between two variables ###
df <- data.frame(table(var1,var2))
ggplot(df,aes(x=var1,y=var2)) +
geom_tile(aes(fill=Freq,color=Freq),show.legend=FALSE,alpha=.8) +
geom_text(aes(label=Freq)) +
scale_fill_continuous(high = "darkslategray4", low = "powderblue")
}
g_legend<-function(a.gplot){
#extract legend from a ggplot object
#https://stackoverflow.com/questions/13649473/add-a-common-legend-for-combined-ggplots
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
#let's consider adding age bins and education bins
d_respondents[ Age_Range == "18-24", age_bin := 1]
d_respondents[ Age_Range == "25-34", age_bin := 2]
d_respondents[ Age_Range == "35-44", age_bin := 3]
d_respondents[ Age_Range == "45-54", age_bin := 4]
d_respondents[ Age_Range == "55-64", age_bin := 5]
d_respondents[ Age_Range == "Above 65", age_bin := 6]
d_respondents[ Education_Level == "Associate's degree", edu_bin := 1]
d_respondents[ Education_Level == "Bachelor's degree", edu_bin := 2]
d_respondents[ Education_Level == "High school", edu_bin := 3]
d_respondents[ Education_Level == "Master's degree and above", edu_bin := 4]
d_respondents[ Education_Level == "Some high school", edu_bin := 5]
d_respondents[ Education_Level == "Trade school", edu_bin := 6]
d_respondents[ Assignment_Group == "Control", assign_bin := 1]
d_respondents[ Assignment_Group == "Medical Feedback", assign_bin := 2]
d_respondents[ Assignment_Group == "Negative Images", assign_bin := 3]
d_respondents[ Assignment_Group == "Positive Images", assign_bin := 4]
d_respondents[ Assignment_Group == "Self-Reflect", assign_bin := 5]
d_respondents[ , US_Dummy := ifelse(country == "United States", 1, 0)]
d_respondents[ , Male_Dummy := ifelse(Gender == "Male", 1, 0)]
#add treatment dummy
d_respondents[ , Treatment_Dummy := ifelse(Assignment_Group != "Control", 1, 0)]
#head(d_respondents)
get_robust_se <- function(model){
# Get robust SE for use in stargazer
vcov <- vcovHC(model,type = "HC1")
return(sqrt(diag(vcov)))
}
# does any treatment have an effect on task phase 2 score?
mod_task2_a <- d_respondents[, lm(TaskPhase2_Score ~ Treatment_Dummy)]
mod_task2_b <- d_respondents[, lm(TaskPhase2_Score ~ Treatment_Dummy +
TaskPhase1_Score +
as.factor(Gender) +
as.factor(Education_Level) +
as.factor(Age_Range))]
stargazer(mod_task2_a,
mod_task2_b,
se = list(get_robust_se(mod_task2_a),get_robust_se(mod_task2_b)),
omit = c("Education_Level","Age_Range"),
add.lines = list(c('Education Fixed Effects', 'No','Yes'),
c('Age Fixed Effects','No','Yes')),
header=FALSE,
type='latex')
#add an F test to compare
pander(anova(mod_task2_a, mod_task2_b, test='F'),stle='rmarkdown')
#does the specific treatment group have an effect on task phase 2 score?
mod_task2_c <- d_respondents[, lm(TaskPhase2_Score ~ as.factor(Assignment_Group))]
mod_task2_d <- d_respondents[, lm(TaskPhase2_Score ~ as.factor(Assignment_Group) +
TaskPhase1_Score +
as.factor(Gender) +
as.factor(Education_Level) +
as.factor(Age_Range))]
# Do you think that there are features of the data that might systematically predict that people will respond strongly or weakly to the treatment effect? List two that you think might be there, in the order that you would like to test them. Then, test for these heterogeneities.
# TODO update this heterogeneity issue. I'm not quite sure this applies because they're both considered treatment groups, just with different granularities
# mod5 <- d_respondents[, lm(TaskPhase2_Score ~ Treatment_Dummy + as.factor(assign_bin) +
#                              Treatment_Dummy * as.factor(assign_bin))]
stargazer(mod_task2_c,
mod_task2_d,
se = list(get_robust_se(mod_task2_c),get_robust_se(mod_task2_d)),
omit = c("Education_Level","Age_Range"),
add.lines = list(c('Education Fixed Effects', 'No','Yes'),
c('Age Fixed Effects','No','Yes')),
header=FALSE,
type='latex')
pander(anova(mod_task2_c, mod_task2_d, test='F'),style='rmarkdown')
head(d_respondents)
d_respondents[ Assignment_Group == "Control",]
d_respondents[ Assignment_Group == "Control",]
d_respondents[ Assignment_Group == "Self-Reflect",]
d_respondents[ Assignment_Group == "Medical Feedback",]
d_respondents[ Assignment_Group == "Positive Images",]
d_respondents[ Assignment_Group == "Negative Images",]
# renaming Control Clicks Phase 1
setnames(d_respondents,
old = c('Q70_First Click', 'Q70_Last Click',
'Q70_Page Submit', 'Q70_Click Count'),
new = c('Control_Phase1_First_ClickTime', 'Control_Phase1_Last_ClickTime',
'Control_Phase1_SubmitTime', 'Control_Phase1_NumClicks'))
# renaming Control Clicks Phase 2
setnames(d_respondents,
old = c('Q90_First Click', 'Q90_Last Click',
'Q90_Page Submit', 'Q90_Click Count'),
new = c('Control_Phase2_First_ClickTime', 'Control_Phase2_Last_ClickTime',
'Control_Phase2_SubmitTime', 'Control_Phase2_NumClicks'))
# renaming Self Reflect Clicks Phase 1
setnames(d_respondents,
old = c('Q61_First Click', 'Q61_Last Click',
'Q61_Page Submit', 'Q61_Click Count'),
new = c('Self_Reflect_Phase1_First_ClickTime', 'Self_Reflect_Phase1_Last_ClickTime',
'Self_Reflect_Phase1_SubmitTime', 'Self_Reflect_Phase1_NumClicks'))
# renaming Self Reflect Clicks Phase 2
setnames(d_respondents,
old = c('Q62_First Click', 'Q62_Last Click',
'Q62_Page Submit', 'Q62_Click Count'),
new = c('Self_Reflect_Phase2_First_ClickTime', 'Self_Reflect_Phase2_Last_ClickTime',
'Self_Reflect_Phase2_SubmitTime', 'Self_Reflect_Phase2_NumClicks'))
# renaming Medical Feedback Clicks Phase 1
setnames(d_respondents,
old = c('Q63_First Click', 'Q63_Last Click',
'Q63_Page Submit', 'Q63_Click Count'),
new = c('Medical_Feedback_Phase1_First_ClickTime',
'Medical_Feedback_Phase1_Last_ClickTime',
'Medical_Feedback_Phase1_SubmitTime',
'Medical_Feedback_Phase1_NumClicks'))
# renaming Medical Feedback Clicks Phase 2
setnames(d_respondents,
old = c('Q64_First Click', 'Q64_Last Click',
'Q64_Page Submit', 'Q64_Click Count'),
new = c('Medical_Feedback_Phase2_First_ClickTime',
'Medical_Feedback_Phase2_Last_ClickTime',
'Medical_Feedback_Phase2_SubmitTime',
'Medical_Feedback_Phase2_NumClicks'))
# renaming Positive Images Clicks Phase 1
setnames(d_respondents,
old = c('Q65_First Click', 'Q65_Last Click',
'Q65_Page Submit', 'Q65_Click Count'),
new = c('Positive_Images_Phase1_First_ClickTime',
'Positive_Images_Phase1_Last_ClickTime',
'Positive_Images_Phase1_SubmitTime',
'Positive_Images_Phase1_NumClicks'))
# renaming Positive Images Clicks Phase 2
setnames(d_respondents,
old = c('Q66_First Click', 'Q66_Last Click',
'Q66_Page Submit', 'Q66_Click Count'),
new = c('Positive_Images_Phase2_First_ClickTime',
'Positive_Images_Phase2_Last_ClickTime',
'Positive_Images_Phase2_SubmitTime',
'Positive_Images_Phase2_NumClicks'))
# renaming Negative Images Clicks Phase 1
setnames(d_respondents,
old = c('Q67_First Click', 'Q67_Last Click',
'Q67_Page Submit', 'Q67_Click Count'),
new = c('Negative_Images_Phase1_First_ClickTime',
'Negative_Images_Phase1_Last_ClickTime',
'Negative_Images_Phase1_SubmitTime',
'Negative_Images_Phase1_NumClicks'))
# renaming Negative Images Clicks Phase 2
setnames(d_respondents,
old = c('Q68_First Click', 'Q68_Last Click',
'Q68_Page Submit', 'Q68_Click Count'),
new = c('Negative_Images_Phase2_First_ClickTime',
'Negative_Images_Phase2_Last_ClickTime',
'Negative_Images_Phase2_SubmitTime',
'Negative_Images_Phase2_NumClicks'))
d_respondents[ Assignment_Group == "Negative Images",]
d_respondents[ Assignment_Group == "Medical Feedback", hist(Medical_Feedback_Phase1_SubmitTime)]
d_respondents[ Assignment_Group == "Medical Feedback", hist(Medical_Feedback_Phase1_SubmitTime)]
d_respondents[ Assignment_Group == "Control", hist(Medical_Feedback_Phase1_SubmitTime)]
d_respondents[ Assignment_Group == "Medical Feedback", hist(Medical_Feedback_Phase1_SubmitTime)]
d_respondents[ Assignment_Group == "Control", hist(Control_Phase1_SubmitTime)]
d_respondents[ Assignment_Group == "Positive Images", hist(Positive_Images_Phase1_SubmitTime)]
d_respondents[ Assignment_Group == "Negative Images", hist(Negative_Images_Phase1_SubmitTime)]
d_respondents[ Assignment_Group == "Self-Reflect", hist(Self_Reflect_Phase1_SubmitTime)]
ggplot(d_respondents, aes(x=Medical_Feedback_Phase1_SubmitTime)) + geom_histogram()
ggplot(d_respondents, aes(x=Medical_Feedback_Phase1_SubmitTime)) + geom_histogram(binwidth = 1)
ggplot(d_respondents, aes(x=Medical_Feedback_Phase1_SubmitTime)) + geom_histogram(binwidth = 20)
ggplot(d_respondents, aes(x=Medical_Feedback_Phase1_SubmitTime)) + geom_histogram(binwidth = 10)
d_respondents[ Assignment_Group == "Medical Feedback", mean(Medical_Feedback_Phase1_SubmitTime)]
d_respondents[ Assignment_Group == "Control", mean(Control_Phase1_SubmitTime)]
d_respondents[ Assignment_Group == "Positive Images", mean(Positive_Images_Phase1_SubmitTime)]
d_respondents[ Assignment_Group == "Negative Images", mean(Negative_Images_Phase1_SubmitTime)]
d_respondents[ Assignment_Group == "Self-Reflect", mean(Self_Reflect_Phase1_SubmitTime)]
head(d_respondents)
head(Assignment_Group == "Self-Reflect", d_respondents)
head(d_respondents[ Assignment_Group == "Self-Reflect", ])
d_respondents[ Assignment_Group == "Self-Reflect", sapply(strsplit(Self_Reflect_Q1, " ", length)) ]
d_respondents[ Assignment_Group == "Self-Reflect", sapply(strsplit(Self_Reflect_Q1, " "), length) ]
d_respondents[ Assignment_Group == "Self-Reflect",
sapply(strsplit(Self_Reflect_Q2, " "), length)]
d_respondents[ Assignment_Group == "Self-Reflect",
sapply(strsplit(Self_Reflect_Q1, " "), length)]
d_respondents[ Assignment_Group == "Self-Reflect",
sapply(strsplit(Self_Reflect_Q2, " "), length)]
d_respondents[ Assignment_Group == "Self-Reflect",
sapply(strsplit(Self_Reflect_Q1, " "), length)]
d_respondents[ Assignment_Group == "Self-Reflect",
sapply(strsplit(Self_Reflect_Q2, " "), length)]
head(d_respondents[ Assignment_Group == "Control", ])
d_respondents[ Assignment_Group == "Control",
sapply(strsplit(Control_Q1, " "), length)]
d_respondents[ Assignment_Group == "Control",
sapply(strsplit(Control_Q2, " "), length)]
d_respondents[d_respondents[ Assignment_Group == "Self-Reflect",
sapply(strsplit(Self_Reflect_Q2, " "), length)]]
d_respondents[ Assignment_Group == "Self-Reflect",
Self_Reflect_Q1_NumWords := sapply(strsplit(Self_Reflect_Q1, " "), length)]
d_respondents[ Assignment_Group == "Self-Reflect",
Self_Reflect_Q2_NumWords := sapply(strsplit(Self_Reflect_Q2, " "), length)]
d_respondents[ Assignment_Group == "Self-Reflect", Self_Reflect_Q1_NumWords < 5]
d_respondents[d_respondents[ Assignment_Group == "Self-Reflect", Self_Reflect_Q1_NumWords < 5]]
d_respondents[d_respondents[ , Self_Reflect_Q1_NumWords < 5]]
