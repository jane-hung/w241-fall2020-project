), ]
d_attrition <- fread('attrition_only_responses_v2.dta')
get_robust_se <- function(model){
# Get robust SE for use in stargazer
vcov <- vcovHC(model,type = "HC1")
return(sqrt(diag(vcov)))
}
create_heatmap <- function(var1, var2) {
### Create a heatmap for a table of frequencies between two variables
df <- data.frame(table(var1,var2))
ggplot(df,aes(x=var1,y=var2)) +
geom_tile(aes(fill=Freq,color=Freq),show.legend=FALSE,alpha=.8) +
geom_text(aes(label=Freq)) +
theme(axis.text.x = element_text(angle = 90)) +
scale_fill_continuous(high = "darkslategray4", low = "powderblue")
}
g_legend<-function(a.gplot){
#extract legend from a ggplot object
#https://stackoverflow.com/questions/13649473/add-a-common-legend-for-combined-ggplots
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
#n survey responses > 30 mins., take outlier out for analysis but discuss below
outlier <- round(d_respondents[`Duration (in seconds)` > 60*30, `Duration (in seconds)`/60/60],1)
completions <- d_respondents[`Duration (in seconds)` < 60*30]
#95% of participants finished below this point in mins.
upper_cl <- completions[, round(mean((`Duration (in seconds)`)/60) + (2 *(sd(`Duration (in seconds)`)/60)), 1)]
#density plot of time completed by assignment group in mins.
ggplot(completions, aes(x=`Duration (in seconds)`/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,60) +
ggtitle("Survey Duration by Assignment Group (sans Outlier)") +
labs(x = "Minutes",color="Assignment Group") +
guides(fill=FALSE)+
geom_vline(xintercept = upper_cl, linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
# check balance between assignment groups
pander(d_respondents[, .N, by = .(Assignment_Group)])
chisq.test(d_respondents[ , table(Assignment_Group)])
# check balance between Task 1 Score
pander(t.test(d_respondents[Treatment_Dummy == 0, TaskPhase1_Score], d_respondents[Treatment_Dummy == 1, TaskPhase1_Score]))
# check balance between Task 1 Score, expanded
pander(anova(d_respondents[,aov(TaskPhase1_Score~Assignment_Group)]))
# check balance between genders
gender_chisq <- chisq.test(d_respondents[ , table(Assignment_Group, Gender)])
create_heatmap(var1 = d_respondents$Assignment_Group,var2 = d_respondents$Gender) +
xlab('Assignment Group') +
ylab('Gender') +
labs(title = 'Contingency table between gender and assignment group',
caption = paste0('Assuming gender distributions are the same among assignment groups, a chi-squared test for independence with ',
round(gender_chisq$parameter,4),' \ndegrees of freedom ', 'yields p=',
round(gender_chisq$p.value,4),
', suggesting that there is no relationship between gender and assignment groups at a \nsignificance level of 0.05.')) +
theme(plot.caption = element_text(hjust = 0),plot.title = element_text(hjust = 0.5))
# check balance between age ranges
age_chisq <- chisq.test(d_respondents[ , table(Assignment_Group, Age_Range)],simulate.p.value = TRUE)
create_heatmap(var1 = d_respondents$Assignment_Group,var2 = d_respondents$Age_Range) +
xlab('Assignment Group') +
ylab('Age Range') +
labs(title = 'Contingency table between age range and assignment group',
caption = paste0('Assuming age distributions are the same among assignment groups, a chi-squared test for independence with Monte \nCarlo simulation yields p=',
round(age_chisq$p.value,4),
', suggesting that there is no relationship between age and assignment groups at a \nsignificance level of 0.05.')) +
theme(plot.caption = element_text(hjust = 0),plot.title = element_text(hjust = 0.5))
#check balance between education levels
edu_chisq <- chisq.test(d_respondents[ , table(Assignment_Group, Education_Level)],simulate.p.value = TRUE)
create_heatmap(var1 = d_respondents$Assignment_Group,var2 = d_respondents$Education_Level) +
xlab('Assignment Group') +
ylab('Education Level') +
labs(title = 'Contingency table between \neducation and assignment group',
caption = paste0('Assuming education distributions are the same among assignment groups, a chi-squared test for \nindependence with Monte Carlo simulation yields p=',
round(edu_chisq$p.value,4),
', suggesting that there is no relationship \nbetween education and assignment groups at a significance level of 0.05.')) +
theme(plot.caption = element_text(hjust = 0),plot.title = element_text(hjust = 0.5))
# check balance between US and non-US respondents
us_chisq <- chisq.test(d_respondents[ , table(Assignment_Group, US_Dummy)])
create_heatmap(var1 = d_respondents$Assignment_Group,var2 = d_respondents$US_Dummy) +
xlab('Assignment Group') +
ylab('Country') +
scale_y_discrete(breaks=c("0", "1"),
labels=c("Non-US", "United States")) +
labs(title = 'Contingency table between country and assignment group',
caption = paste0('Assuming country distributions are the same among assignment groups, a chi-squared test for independence with \n',
round(us_chisq$parameter,4),' degrees of freedom ', 'yields p=',
round(us_chisq$p.value,4),
', suggesting that there is no relationship between country and assignment \ngroups at a significance level of 0.05.')) +
theme(plot.caption = element_text(hjust = 0),plot.title = element_text(hjust = 0.5))
#table of when subjects left the experiment
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
attrition_table <- attrition_table[c(3, 4, 1)]
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2 \n 14 people attrited out of the study before Task Phase 1, and were not assigned to a treatment group")  %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) #%>% # format first column
#column_spec(5, bold = T)# format last row
#By treatment group
#Control  proportion test
# prop.test(attrition_table[1,], attrition_table[6,])
pander(fisher.test(cbind(t(attrition_table[1,]),t(attrition_table[6,]))))
#Medical Feedback proportion test
# prop.test(attrition_table[2,], attrition_table[6,])
pander(fisher.test(cbind(t(attrition_table[2,]),t(attrition_table[6,]))))
#Negative Images proportion test
# pander(prop.test(attrition_table[3,], attrition_table[6,],))
pander(fisher.test(cbind(t(attrition_table[3,]),t(attrition_table[6,]))))
#Positive Images proportion test
# pander(prop.test(attrition_table[4,], attrition_table[6,]))
pander(fisher.test(cbind(t(attrition_table[4,]),t(attrition_table[6,]))))
#Self Reflect proportion test
# prop.test(attrition_table[5,], attrition_table[6,])
pander(fisher.test(cbind(t(attrition_table[5,]),t(attrition_table[6,]))))
### By task phase
#before task phase 2 prop test
# prop.test(attrition_table[,1], attrition_table[,4])
pander(fisher.test(attrition_table[,c(1,4)]))
# test final task and any treatment
mod_task3_a <- d_respondents[, lm(TaskPhase3_Score ~ Treatment_Dummy)]
mod_task3_b <- d_respondents[, lm(TaskPhase3_Score ~ Treatment_Dummy +
TaskPhase1_Score +
as.factor(Gender) +
as.factor(Education_Level) +
as.factor(Age_Range) +
as.factor(US_Dummy))]
# test final task and specific treatment
# mod_task3_c <- d_respondents[, lm(TaskPhase3_Score ~ as.factor(Assignment_Group))]
mod_task3_d <- d_respondents[, lm(TaskPhase3_Score ~ as.factor(Assignment_Group) +
TaskPhase1_Score +
as.factor(Gender) +
as.factor(Education_Level) +
as.factor(Age_Range) +
as.factor(US_Dummy))]
stargazer(mod_task3_a,
mod_task3_b,
# mod_task3_c,
mod_task3_d,
se = list(get_robust_se(mod_task3_a),
get_robust_se(mod_task3_b),
# get_robust_se(mod_task3_c),
get_robust_se(mod_task3_d)),
omit = c("Education_Level","Age_Range"),
add.lines = list(c('Education FE', 'No','Yes','Yes'),
c('Age FE','No','Yes','Yes')),
order = c(1,2,3,4,5),
covariate.labels = c('Any Feedback','Medical Feedback','Negative Images','Positive Images','Self-Reflect','Task Phase 1 Score','Male','US'),
omit.stat=c("ser","f"),
dep.var.labels = 'Task Phase 3 Score',
no.space=TRUE,
header=FALSE,
title = 'Test for effects of repeated feedback on performance',
label = 'model3',
type='latex')
pander(anova(mod_task3_b, mod_task3_d, test='F'),style='rmarkdown')
anova(mod_task3_b, mod_task3_d, test='F')[2,'Pr(>F)']
t.test(d_noncompliance_1[Assignment_Group %in% c("Positive Images"), Treatment_Phase1_SubmitTime], d_noncompliance_1[Assignment_Group %in% c("Negative Images") & Treatment_Phase1_SubmitTime <= 120, Treatment_Phase1_SubmitTime])[3][1]
t.test(d_noncompliance_1[Assignment_Group %in% c("Positive Images"), Treatment_Phase1_SubmitTime], d_noncompliance_1[Assignment_Group %in% c("Negative Images") & Treatment_Phase1_SubmitTime <= 120, Treatment_Phase1_SubmitTime])[3][1]
# renaming Control Clicks Phase 1 - submit after 70, advance after 180 seconds
setnames(d_respondents,
old = c('Q70_First Click', 'Q70_Last Click',
'Q70_Page Submit', 'Q70_Click Count'),
new = c('Control_Phase1_First_ClickTime', 'Control_Phase1_Last_ClickTime',
'Control_Phase1_SubmitTime', 'Control_Phase1_NumClicks'))
# renaming Control Clicks Phase 2 - submit after 70, advance after 180 seconds
setnames(d_respondents,
old = c('Q90_First Click', 'Q90_Last Click',
'Q90_Page Submit', 'Q90_Click Count'),
new = c('Control_Phase2_First_ClickTime', 'Control_Phase2_Last_ClickTime',
'Control_Phase2_SubmitTime', 'Control_Phase2_NumClicks'))
# renaming Self Reflect Clicks Phase 1 - submit after 90, advance after 240 seconds
setnames(d_respondents,
old = c('Q61_First Click', 'Q61_Last Click',
'Q61_Page Submit', 'Q61_Click Count'),
new = c('Self_Reflect_Phase1_First_ClickTime', 'Self_Reflect_Phase1_Last_ClickTime',
'Self_Reflect_Phase1_SubmitTime', 'Self_Reflect_Phase1_NumClicks'))
# renaming Self Reflect Clicks Phase 2 - submit after 90, advance after 240 seconds
setnames(d_respondents,
old = c('Q62_First Click', 'Q62_Last Click',
'Q62_Page Submit', 'Q62_Click Count'),
new = c('Self_Reflect_Phase2_First_ClickTime', 'Self_Reflect_Phase2_Last_ClickTime',
'Self_Reflect_Phase2_SubmitTime', 'Self_Reflect_Phase2_NumClicks'))
# renaming Medical Feedback Clicks Phase 1 - submit after 90, advance after 240 seconds
setnames(d_respondents,
old = c('Q63_First Click', 'Q63_Last Click',
'Q63_Page Submit', 'Q63_Click Count'),
new = c('Medical_Feedback_Phase1_First_ClickTime',
'Medical_Feedback_Phase1_Last_ClickTime',
'Medical_Feedback_Phase1_SubmitTime',
'Medical_Feedback_Phase1_NumClicks'))
# renaming Medical Feedback Clicks Phase 2 - submit after 90, advance after 240 seconds
setnames(d_respondents,
old = c('Q64_First Click', 'Q64_Last Click',
'Q64_Page Submit', 'Q64_Click Count'),
new = c('Medical_Feedback_Phase2_First_ClickTime',
'Medical_Feedback_Phase2_Last_ClickTime',
'Medical_Feedback_Phase2_SubmitTime',
'Medical_Feedback_Phase2_NumClicks'))
# renaming Positive Images Clicks Phase 1 - submit after 45, advance after 120 seconds
setnames(d_respondents,
old = c('Q65_First Click', 'Q65_Last Click',
'Q65_Page Submit', 'Q65_Click Count'),
new = c('Positive_Images_Phase1_First_ClickTime',
'Positive_Images_Phase1_Last_ClickTime',
'Positive_Images_Phase1_SubmitTime',
'Positive_Images_Phase1_NumClicks'))
# renaming Positive Images Clicks Phase 2 - submit after 45, advance after 120 seconds
setnames(d_respondents,
old = c('Q66_First Click', 'Q66_Last Click',
'Q66_Page Submit', 'Q66_Click Count'),
new = c('Positive_Images_Phase2_First_ClickTime',
'Positive_Images_Phase2_Last_ClickTime',
'Positive_Images_Phase2_SubmitTime',
'Positive_Images_Phase2_NumClicks'))
# renaming Negative Images Clicks Phase 1 - submit after 45, advance after 120 seconds
setnames(d_respondents,
old = c('Q67_First Click', 'Q67_Last Click',
'Q67_Page Submit', 'Q67_Click Count'),
new = c('Negative_Images_Phase1_First_ClickTime',
'Negative_Images_Phase1_Last_ClickTime',
'Negative_Images_Phase1_SubmitTime',
'Negative_Images_Phase1_NumClicks'))
# renaming Negative Images Clicks Phase 2 - submit after 45, advance after 120 seconds
setnames(d_respondents,
old = c('Q68_First Click', 'Q68_Last Click',
'Q68_Page Submit', 'Q68_Click Count'),
new = c('Negative_Images_Phase2_First_ClickTime',
'Negative_Images_Phase2_Last_ClickTime',
'Negative_Images_Phase2_SubmitTime',
'Negative_Images_Phase2_NumClicks'))
# set up datatable for Treatment Phase 1 Times
a <- d_respondents[ Assignment_Group == "Medical Feedback", Medical_Feedback_Phase1_SubmitTime]
b <- d_respondents[ Assignment_Group == "Control", (Control_Phase1_SubmitTime)]
c <- d_respondents[ Assignment_Group == "Positive Images", (Positive_Images_Phase1_SubmitTime)]
d <- d_respondents[ Assignment_Group == "Negative Images", (Negative_Images_Phase1_SubmitTime)]
e <- d_respondents[ Assignment_Group == "Self-Reflect", (Self_Reflect_Phase1_SubmitTime)]
#(coalesce(c(a,b,c,d,e)))
d_noncompliance_1 <- data.table(id=1:333)
d_noncompliance_1[ , Assignment_Group := (c(rep("Medical Feedback", 66), rep("Control", 65), rep("Positive Images", 66), rep("Negative Images", 70), rep("Self-Reflect", 66)))]
d_noncompliance_1[ , Treatment_Phase1_SubmitTime := (coalesce(c(a,b,c,d,e)))]
#set up datatable for Treatment Phase 2 Times
a <- d_respondents[ Assignment_Group == "Medical Feedback", Medical_Feedback_Phase2_SubmitTime]
b <- d_respondents[ Assignment_Group == "Control", (Control_Phase2_SubmitTime)]
c <- d_respondents[ Assignment_Group == "Positive Images", (Positive_Images_Phase2_SubmitTime)]
d <- d_respondents[ Assignment_Group == "Negative Images", (Negative_Images_Phase2_SubmitTime)]
e <- d_respondents[ Assignment_Group == "Self-Reflect", (Self_Reflect_Phase2_SubmitTime)]
#(coalesce(c(a,b,c,d,e)))
d_noncompliance_2 <- data.table(id=1:333)
d_noncompliance_2[ , Assignment_Group := (c(rep("Medical Feedback", 66), rep("Control", 65), rep("Positive Images", 66), rep("Negative Images", 70), rep("Self-Reflect", 66)))]
d_noncompliance_2[ , Treatment_Phase2_SubmitTime := (coalesce(c(a,b,c,d,e)))]
########## plot density distributions of timing for Treatment Phase 1: Medical Feedback vs Self-Reflect
ggplot(d_noncompliance_1[Assignment_Group %in% c("Medical Feedback", "Self-Reflect")], aes(x=Treatment_Phase1_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(60, 500) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 1 Duration Distribution") + geom_vline(xintercept = 90, color = "dodgerblue4") + geom_vline(xintercept = 240, color = "midnightblue") + theme(plot.title = element_text(hjust = 0.5)) +
annotate("text", x = 80, y = 5, label = "Eligible to Submit", angle=90, color="dodgerblue4") +
annotate("text", x = 230, y = 5, label = "Auto-Advance", angle=90, color = "midnightblue") +
labs(fill="Assignment Group") +
guides(color=FALSE)
ggplot(d_noncompliance_2[Assignment_Group %in% c("Medical Feedback", "Self-Reflect")], aes(x=Treatment_Phase2_SubmitTime, colour=as.factor(Assignment_Group), fill = as.factor(Assignment_Group))) + geom_histogram(alpha=0.3, position = "identity") + xlim(60, 500) + xlab("Completion Time (seconds)") + ggtitle("Treatment Phase 2 Duration Distribution") + geom_vline(xintercept = 90, color = "dodgerblue4") + geom_vline(xintercept = 240, color = "midnightblue") + theme(plot.title = element_text(hjust = 0.5)) +
annotate("text", x = 80, y = 5, label = "Eligible to Submit", angle=90, color="dodgerblue4") +
annotate("text", x = 230, y = 5, label = "Auto-Advance", angle=90, color = "midnightblue") +
labs(fill="Assignment Group") +
guides(color=FALSE)
t.test(d_noncompliance_1[Assignment_Group %in% c("Positive Images"), Treatment_Phase1_SubmitTime], d_noncompliance_1[Assignment_Group %in% c("Negative Images") & Treatment_Phase1_SubmitTime <= 120, Treatment_Phase1_SubmitTime])[3][1]
library(foreign)
library(data.table)
library(knitr)
library(cobalt)
library(stargazer)
library(sandwich)
library(car)
library(dplyr)
library(ggmap)
library(revgeo)
library(AER)
library(ggplot2)
library(expss)
library(grid)
library(gridExtra)
library(pander)
library(lmtest)
library(kableExtra)
library(bookdown)
opts_knit$set()
options(digits=3)
knitr::opts_chunk$set(echo = FALSE,warning = FALSE,message=FALSE)
rm(list = ls())
d_respondents <- fread('datatable_clean_survey_responses_v2.dta')
d_respondents <-
d_respondents[!Amazon_Turk_ID %in% c(
"A32K1M0A36EAK5",
"A3I700VG8POSWH",
"A3EPIT2P3ISA3K",
"A390TP4DJI9P9W",
"A3EPIT2P3ISA3K",
"AUFLTHQAXWLH1",
"AMZ1NNF182G8V",
"A3BG20JPQLNKE1",
"AVINXZZV3FNG7",
"A3D4CITR1C9L3W",
"A1BUYK6LXYWMLL",
"A1FHRZXSE7XNJ4",
"A12NQJV6TA5OWB",
"AGCQCHHAQVA6R",
"A119EX2L0DNN1B",
"A3BPENSX5EVJ2H",
"A371SNJNNUY9Z6",
"A33YPBYXXZP3HY",
"A3NYIJYBHAJ74V",
"A2NGFU82LMJ80X",
"A2J016DRTOBXWO",
"A2GSZ3D2XXC533",
"A2IGIOD74EPOEF",
"A18WFPSLFV4FKY",
"A1GMYDH5MKN105",
"A8H1AW1NWPMAJ",
"A39AAWF3F8OM6Q",
"A26399B1QZ7XJJ",
"A1NA92R0YGX32U",
"A30UB0NUUWB3RM",
"A16JX1MOPDCYDN",
"A16X5FB3HAFCKN",
"A211KGJ94WNFLN",
"A1PGY59BR6C5BX",
"AG5RF4UGQJ7A7",
"A13T1DZG02HLNL",
"A1WUFHQ1YGHK3C",
"A1GNPQ5LM6YY5I",
"A3EZ0H07TSDAPW",
"ADLZLGHKOAEE6",
"A1CF1W8CP0DHB0",
"A3VP14XN3WUUOC",
"A7VQQEIBSM9IU",
"A8DER1QY96C5X",
"A1M8MNKK8H5ZGW",
"A1J3ICF1NZYFCR",
"A34D5D6PU193AR"
), ]
d_attrition <- fread('attrition_only_responses_v2.dta')
get_robust_se <- function(model){
# Get robust SE for use in stargazer
vcov <- vcovHC(model,type = "HC1")
return(sqrt(diag(vcov)))
}
create_heatmap <- function(var1, var2) {
### Create a heatmap for a table of frequencies between two variables
df <- data.frame(table(var1,var2))
ggplot(df,aes(x=var1,y=var2)) +
geom_tile(aes(fill=Freq,color=Freq),show.legend=FALSE,alpha=.8) +
geom_text(aes(label=Freq)) +
theme(axis.text.x = element_text(angle = 90)) +
scale_fill_continuous(high = "darkslategray4", low = "powderblue")
}
g_legend<-function(a.gplot){
#extract legend from a ggplot object
#https://stackoverflow.com/questions/13649473/add-a-common-legend-for-combined-ggplots
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
#n survey responses > 30 mins., take outlier out for analysis but discuss below
outlier <- round(d_respondents[`Duration (in seconds)` > 60*30, `Duration (in seconds)`/60/60],1)
completions <- d_respondents[`Duration (in seconds)` < 60*30]
#95% of participants finished below this point in mins.
upper_cl <- completions[, round(mean((`Duration (in seconds)`)/60) + (2 *(sd(`Duration (in seconds)`)/60)), 1)]
#density plot of time completed by assignment group in mins.
ggplot(completions, aes(x=`Duration (in seconds)`/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,60) +
ggtitle("Survey Duration by Assignment Group (sans Outlier)") +
labs(x = "Minutes",color="Assignment Group",caption = "Figure 2. Distribution of survey duration by assignment group (excluding outliers)") +
guides(fill=FALSE)+
geom_vline(xintercept = upper_cl, linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
# check balance between assignment groups
pander(d_respondents[, .N, by = .(Assignment_Group)])
chisq.test(d_respondents[ , table(Assignment_Group)])
# check balance between Task 1 Score
pander(t.test(d_respondents[Treatment_Dummy == 0, TaskPhase1_Score], d_respondents[Treatment_Dummy == 1, TaskPhase1_Score]))
# check balance between Task 1 Score, expanded
pander(anova(d_respondents[,aov(TaskPhase1_Score~Assignment_Group)]))
# check balance between genders
gender_chisq <- chisq.test(d_respondents[ , table(Assignment_Group, Gender)])
create_heatmap(var1 = d_respondents$Assignment_Group,var2 = d_respondents$Gender) +
xlab('Assignment Group') +
ylab('Gender') +
labs(title = 'Contingency table between gender and assignment group',
caption = paste0('Assuming gender distributions are the same among assignment groups, a chi-squared test for independence with ',
round(gender_chisq$parameter,4),' \ndegrees of freedom ', 'yields p=',
round(gender_chisq$p.value,4),
', suggesting that there is no relationship between gender and assignment groups at a \nsignificance level of 0.05.')) +
theme(plot.caption = element_text(hjust = 0),plot.title = element_text(hjust = 0.5))
# check balance between age ranges
age_chisq <- chisq.test(d_respondents[ , table(Assignment_Group, Age_Range)],simulate.p.value = TRUE)
create_heatmap(var1 = d_respondents$Assignment_Group,var2 = d_respondents$Age_Range) +
xlab('Assignment Group') +
ylab('Age Range') +
labs(title = 'Contingency table between age range and assignment group',
caption = paste0('Assuming age distributions are the same among assignment groups, a chi-squared test for independence with Monte \nCarlo simulation yields p=',
round(age_chisq$p.value,4),
', suggesting that there is no relationship between age and assignment groups at a \nsignificance level of 0.05.')) +
theme(plot.caption = element_text(hjust = 0),plot.title = element_text(hjust = 0.5))
#check balance between education levels
edu_chisq <- chisq.test(d_respondents[ , table(Assignment_Group, Education_Level)],simulate.p.value = TRUE)
create_heatmap(var1 = d_respondents$Assignment_Group,var2 = d_respondents$Education_Level) +
xlab('Assignment Group') +
ylab('Education Level') +
labs(title = 'Contingency table between \neducation and assignment group',
caption = paste0('Assuming education distributions are the same among assignment groups, a chi-squared test for \nindependence with Monte Carlo simulation yields p=',
round(edu_chisq$p.value,4),
', suggesting that there is no relationship \nbetween education and assignment groups at a significance level of 0.05.')) +
theme(plot.caption = element_text(hjust = 0),plot.title = element_text(hjust = 0.5))
# check balance between US and non-US respondents
us_chisq <- chisq.test(d_respondents[ , table(Assignment_Group, US_Dummy)])
create_heatmap(var1 = d_respondents$Assignment_Group,var2 = d_respondents$US_Dummy) +
xlab('Assignment Group') +
ylab('Country') +
scale_y_discrete(breaks=c("0", "1"),
labels=c("Non-US", "United States")) +
labs(title = 'Contingency table between country and assignment group',
caption = paste0('Assuming country distributions are the same among assignment groups, a chi-squared test for independence with \n',
round(us_chisq$parameter,4),' degrees of freedom ', 'yields p=',
round(us_chisq$p.value,4),
', suggesting that there is no relationship between country and assignment \ngroups at a significance level of 0.05.')) +
theme(plot.caption = element_text(hjust = 0),plot.title = element_text(hjust = 0.5))
#table of when subjects left the experiment
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
attrition_table <- attrition_table[c(3, 4, 1)]
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2 \n 14 people attrited out of the study before Task Phase 1, and were not assigned to a treatment group")  %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) #%>% # format first column
#column_spec(5, bold = T)# format last row
#table of when subjects left the experiment
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
attrition_table <- attrition_table[c(3, 4, 1)]
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2") %>%
footnote(general = "14 people attrited out of the study before Task Phase 1, and were not assigned to a treatment group")  %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) #%>% # format first column
#column_spec(5, bold = T)# format last row
#table of when subjects left the experiment
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
attrition_table <- attrition_table[c(3, 4, 1)]
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2") %>%
footnote(general = "14 people attrited out of the study before Task Phase 1, and were not assigned to a treatment group",
footnote_as_chunk = TRUE)  %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) #%>% # format first column
#column_spec(5, bold = T)# format last row
#table of when subjects left the experiment
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
attrition_table <- attrition_table[c(3, 4, 1)]
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2 \n14 people attrited out of the study before Task Phase 1, and were not assigned to a treatment group",
footnote_as_chunk = TRUE) %>%
footnote(general = "14 people attrited out of the study before Task Phase 1, and were not assigned to a treatment group",
footnote_as_chunk = TRUE)  %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) #%>% # format first column
#column_spec(5, bold = T)# format last row
#table of when subjects left the experiment
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
attrition_table <- attrition_table[c(3, 4, 1)]
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(general = "Random assignment occurs before Task Phase 2 \n14 people attrited out of the study before Task Phase 1, and were not assigned to a treatment group",
footnote_as_chunk = TRUE) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) #%>% # format first column
#column_spec(5, bold = T)# format last row
#table of when subjects left the experiment
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
attrition_table <- attrition_table[c(3, 4, 1)]
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(number = c("Random assignment occurs before Task Phase 2", "n14 people attrited out of the study before Task Phase 1, and were not assigned to a treatment group"),
footnote_as_chunk = TRUE) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) #%>% # format first column
#column_spec(5, bold = T)# format last row
#table of when subjects left the experiment
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
attrition_table <- attrition_table[c(3, 4, 1)]
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(number = c("Random assignment occurs before Task Phase 2", "\n14 people attrited out of the study before Task Phase 1, and were not assigned to a treatment group"),
footnote_as_chunk = TRUE) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) #%>% # format first column
#column_spec(5, bold = T)# format last row
#table of when subjects left the experiment
attrition_table <- as.data.frame.matrix(d_attrition[, addmargins(table(Assignment_Group, Attrition_Stage))])
attrition_table <- attrition_table[c(3, 4, 1)]
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(number = c("Random assignment occurs before Task Phase 2\n", "14 people attrited out of the study before Task Phase 1, and were not assigned to a treatment group"),
footnote_as_chunk = TRUE) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) #%>% # format first column
#column_spec(5, bold = T)# format last row
kable(attrition_table, caption = "Attrition by Stage and Feedback Type") %>%
footnote(number = c("Random assignment occurs before Task Phase 2\n", "14 people attrited out of the study before Task Phase 1, and were not assigned to a treatment group"),
footnote_as_chunk = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
row_spec(dim(attrition_table)[1], bold = T) %>% # format last row
column_spec(1, italic = T) #%>% # format first column
