ggplot(d_respondents, aes(x=Survey_Duration, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.2) +
xlim(0,2700)
ggtitle("Survey Duration by Assignment Group") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d_respondents, aes(x=Survey_Duration, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.2) +
xlim(0,2000)
ggtitle("Survey Duration by Assignment Group") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d_respondents, aes(x=Survey_Duration, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.2) +
xlim(0,2000)
ggtitle("Survey Duration by Assignment Group") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d_respondents, aes(x=Survey_Duration, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.5) +
xlim(0,2000)
ggtitle("Survey Duration by Assignment Group") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d_respondents, aes(x=Survey_Duration, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.4) +
xlim(0,2000)
ggtitle("Survey Duration by Assignment Group") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d_respondents, aes(x=Survey_Duration, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,2000)
ggtitle("Survey Duration by Assignment Group") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d_respondents, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,2000)
ggtitle("Survey Duration by Assignment Group") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d_respondents, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,25)
ggtitle("Survey Duration by Assignment Group") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d_respondents, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,30)
ggtitle("Survey Duration by Assignment Group") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d_respondents, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,30) +
ggtitle("Survey Duration by Assignment Group") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d_respondents, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,30) +
ggtitle("Survey Duration by Assignment Group") +
labs(x = "Minutes") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d_respondents, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,30) +
ggtitle("Survey Duration by Assignment Group") +
labs(x = "Minutes") +
geom_vline(20, linetype, color = "blue", size = 0.5)
ggplot(d_respondents, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,30) +
ggtitle("Survey Duration by Assignment Group") +
labs(x = "Minutes") +
geom_vline(20, linetype, color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d_respondents, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,30) +
ggtitle("Survey Duration by Assignment Group") +
labs(x = "Minutes") +
geom_vline(xintercept = 20, linetype, color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d_respondents, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,30) +
ggtitle("Survey Duration by Assignment Group") +
labs(x = "Minutes") +
geom_vline(xintercept = 20, linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d_respondents, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,30) +
ggtitle("Survey Duration by Assignment Group") +
labs(x = "Minutes") +
geom_vline(xintercept = mean(Assignment_Group), linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d_respondents, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,30) +
ggtitle("Survey Duration by Assignment Group") +
labs(x = "Minutes") +
geom_vline(xintercept = mean(Survey_Duration/60), linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d_respondents, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,30) +
ggtitle("Survey Duration by Assignment Group") +
labs(x = "Minutes") +
geom_vline(xintercept = mean((d_respondents$Survey_Duration)/60), linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d_respondents, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,30) +
ggtitle("Survey Duration by Assignment Group") +
labs(x = "Minutes") +
geom_vline(xintercept = mean((d_respondents$Survey_Duration)/60 + (2 *((d_respondents$Survey_Duration)/60), linetype="dotted", color = "blue", size = 0.5) +
ggplot(d_respondents, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,30) +
ggtitle("Survey Duration by Assignment Group") +
labs(x = "Minutes") +
geom_vline(xintercept = mean((d_respondents$Survey_Duration)/60 + (2 *((d_respondents$Survey_Duration)/60), linetype="dotted", color = "blue", size = 0.5) +
ggplot(d_respondents, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,30) +
ggtitle("Survey Duration by Assignment Group") +
labs(x = "Minutes") +
geom_vline(xintercept = mean((d_respondents$Survey_Duration)/60) + (2 *((d_respondents$Survey_Duration)/60)), linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d_respondents, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,30) +
ggtitle("Survey Duration by Assignment Group") +
labs(x = "Minutes") +
geom_vline(xintercept = mean((d_respondents$Survey_Duration)/60) + (2 *(sd(d_respondents$Survey_Duration)/60)), linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d_respondents, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,60) +
ggtitle("Survey Duration by Assignment Group") +
labs(x = "Minutes") +
geom_vline(xintercept = mean((d_respondents$Survey_Duration)/60) + (2 *(sd(d_respondents$Survey_Duration)/60)), linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
max(d_respondents$Survey_Duration)/60
d_respondents[Survey_Duration > 5000]
d_respondents <- d_respondents[Survey_Duration < 5000]
max(d_respondents$Survey_Duration)/60
ggplot(d_respondents, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,60) +
ggtitle("Survey Duration by Assignment Group") +
labs(x = "Minutes") +
geom_vline(xintercept = mean((d_respondents$Survey_Duration)/60) + (2 *(sd(d_respondents$Survey_Duration)/60)), linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
mean((d_respondents$Survey_Duration)/60) + (2 *(sd(d_respondents$Survey_Duration)/60))
completions <- d_respondents[Survey_Duration < 5000]
max(completions$Survey_Duration)/60
ggplot(completions, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,60) +
ggtitle("Survey Duration by Assignment Group") +
labs(x = "Minutes") +
geom_vline(xintercept = mean((completions$Survey_Duration)/60) + (2 *(sd(completions$Survey_Duration)/60)), linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
outlier <- max(completions$Survey_Duration)/60
completions <- d_respondents[Survey_Duration < 5000]
outlier <- max(completions$Survey_Duration)/60
outliers <- d_respondents[Survey_Duration > 60*60]
outliers
d_respondents
outliers <- d_respondents[Survey_Duration > 60*60]
opts_knit$set()
options(digits=4)
knitr::opts_chunk$set(echo = TRUE)
outlier <- d_respondents[Survey_Duration > 60*60]
outlier
outlier <- d_respondents[Survey_Duration > 60*60]
completions <- d_respondents[Survey_Duration < 5000]
ggplot(completions, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,60) +
ggtitle("Survey Duration by Assignment Group") +
labs(x = "Minutes") +
geom_vline(xintercept = mean((completions$Survey_Duration)/60) + (2 *(sd(completions$Survey_Duration)/60)), linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
outlier <- d_respondents[Survey_Duration > 60*60]
completions <- d_respondents[Survey_Duration < 5000]
ggplot(completions, aes(x=Survey_Duration/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,60) +
ggtitle("Survey Duration by Assignment Group (sans Outlier") +
labs(x = "Minutes") +
geom_vline(xintercept = mean((completions$Survey_Duration)/60) + (2 *(sd(completions$Survey_Duration)/60)), linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
max(d_respondents$Survey_Duration)
max(d_respondents$Survey_Duration/60)
library(foreign)
library(data.table)
library(knitr)
library(cobalt)
library(stargazer)
library(sandwich)
library(car)
library(dplyr)
library(ggmap)
library(revgeo)
library(AER)
library(ggplot2)
library(expss)
library(grid)
library(gridExtra)
library(pander)
opts_knit$set()
options(digits=4)
knitr::opts_chunk$set(echo = TRUE)
d_respondents <- fread('datatable_clean_survey_responses_v2.dta')
max(d_respondents$Survey_Duration/60)
completions <- d_respondents[Survey_Duration < 5000]
max(d_respondents$Survey_Duration/60)
max(d_respondents$Survey_Duration)/60
completions <- d_respondents[Survey_Duration < 5000]
completions <- d_respondents[Survey_Duration < 5000]
max(d_respondents$Survey_Duration)/60
outliers <- d_respondents[Survey_Duration > 60*60]
completions <- d_respondents[Survey_Duration < 5000]
library(foreign)
library(data.table)
library(knitr)
library(cobalt)
library(stargazer)
library(sandwich)
library(car)
library(dplyr)
library(ggmap)
library(revgeo)
library(AER)
library(ggplot2)
library(expss)
library(grid)
library(gridExtra)
library(pander)
opts_knit$set()
options(digits=4)
knitr::opts_chunk$set(echo = TRUE)
d_respondents <- fread('datatable_clean_survey_responses_v2.dta')
max(d_respondents$Survey_Duration)/60
max(d_respondents$Survey_Duration)
d_respondents[Survey_Duration < 5000]
head(d_respondents)
d_respondents
max(d_respondents$`Duration (in seconds)`)
max(d_respondents$`Duration (in seconds)`)/60
d_respondents[`Duration (in seconds)` > 30*30]
d_respondents[`Duration (in seconds)` > 60*60]
d_respondents[`Duration (in seconds)` > 60*60, .N]
d_respondents[`Duration (in seconds)` > 60*45, .N]
d_respondents[`Duration (in seconds)` > 60*45, .N]
d_respondents[`Duration (in seconds)` > 60*40, .N]
d_respondents[`Duration (in seconds)` > 60*30, .N]
d_respondents[`Duration (in seconds)` > 60*30, .N]
completions <- d_respondents[`Duration (in seconds)` < 60*30]
completions <- d_respondents[`Duration (in seconds)` < 60*30, .N]
#how many survey responses took over 30 minutes
d_respondents[`Duration (in seconds)` > 60*30, .N]
completions <- d_respondents[`Duration (in seconds)` < 60*30, .N]
ggplot(completions, aes(x=`Duration (in seconds)`/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,60) +
ggtitle("Survey Duration by Assignment Group (sans Outlier") +
labs(x = "Minutes") +
geom_vline(xintercept = mean((completions$`Duration (in seconds)`)/60) + (2 *(sd(completions$`Duration (in seconds)`)/60)), linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
d_respondents[`Duration (in seconds)` > 60*30, .N]
completions <- d_respondents[`Duration (in seconds)` < 60*30, .N]
completions
#how many survey responses took over 30 minutes
d_respondents[`Duration (in seconds)` > 60*30, .N]
completions <- d_respondents[`Duration (in seconds)` < 60*30]
ggplot(completions, aes(x=`Duration (in seconds)`/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,60) +
ggtitle("Survey Duration by Assignment Group (sans Outlier") +
labs(x = "Minutes") +
geom_vline(xintercept = mean((completions$`Duration (in seconds)`)/60) + (2 *(sd(completions$`Duration (in seconds)`)/60)), linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
d_respondents[`Duration (in seconds)` > 60*30, .N]
d_respondents[`Duration (in seconds)` > 60*30]
d_respondents[`Duration (in seconds)` > 60*30, `Duration (in seconds)`/60]
d_respondents[`Duration (in seconds)` > 60*30, `Duration (in seconds)`/60/60]
#how many survey responses took over 30 minutes
d_respondents[`Duration (in seconds)` > 60*30, .N]
outlier <- d_respondents[`Duration (in seconds)` > 60*30, `Duration (in seconds)`/60/60]
completions <- d_respondents[`Duration (in seconds)` < 60*30]
ggplot(completions, aes(x=`Duration (in seconds)`/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,60) +
ggtitle("Survey Duration by Assignment Group (sans Outlier") +
labs(x = "Minutes") +
geom_vline(xintercept = mean((completions$`Duration (in seconds)`)/60) + (2 *(sd(completions$`Duration (in seconds)`)/60)), linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
upper_cl <- mean((completions$`Duration (in seconds)`)/60) + (2 *(sd(completions$`Duration (in seconds)`)/60)
upper_cl
upper_cl <- mean((completions$`Duration (in seconds)`)/60) + (2 *(sd(completions$`Duration (in seconds)`)/60))
upper_cl
#n survey responses > 30 mins., take outlier out for analysis but discuss below
d_respondents[`Duration (in seconds)` > 60*30, .N]
outlier <- d_respondents[`Duration (in seconds)` > 60*30, `Duration (in seconds)`/60/60]
completions <- d_respondents[`Duration (in seconds)` < 60*30]
#95% of participants finished below this point in mins.
upper_cl <- mean((completions$`Duration (in seconds)`)/60) + (2 *(sd(completions$`Duration (in seconds)`)/60))
#density plot of time completed by assignment group in mins.
ggplot(completions, aes(x=`Duration (in seconds)`/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,60) +
ggtitle("Survey Duration by Assignment Group (sans Outlier)") +
labs(x = "Minutes") +
geom_vline(xintercept = upper_cl, linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
d_respondents[`Duration (in seconds)` > 60*30, .N]
#n survey responses > 30 mins., take outlier out for analysis but discuss below
outlier <- d_respondents[`Duration (in seconds)` > 60*30, `Duration (in seconds)`/60/60]
completions <- d_respondents[`Duration (in seconds)` < 60*30]
#95% of participants finished below this point in mins.
upper_cl <- mean((completions$`Duration (in seconds)`)/60) + (2 *(sd(completions$`Duration (in seconds)`)/60))
#density plot of time completed by assignment group in mins.
ggplot(completions, aes(x=`Duration (in seconds)`/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,60) +
ggtitle("Survey Duration by Assignment Group (sans Outlier)") +
labs(x = "Minutes") +
geom_vline(xintercept = upper_cl, linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
upper_cl <- round(mean((completions$`Duration (in seconds)`)/60) + (2 *(sd(completions$`Duration (in seconds)`)/60)), 2)
upper_cl
upper_cl <- round(mean((completions$`Duration (in seconds)`)/60) + (2 *(sd(completions$`Duration (in seconds)`)/60)), 1)
upper_cl
outlier <- d_respondents[`Duration (in seconds)` > 60*30, `Duration (in seconds)`/60/60]
outlier
outlier <- round(d_respondents[`Duration (in seconds)` > 60*30, `Duration (in seconds)`/60/60],1)
outlier
completions[, round(`Duration (in seconds)`)/60) + (2*`Duration (in seconds)`/60),1)]
completions[, round(`Duration (in seconds)`)/60) + (2*`Duration (in seconds)`/60)), 1)]
completions[, round(`Duration (in seconds)`)/60) + (2*`sd(Duration (in seconds)`/60), 1)]
completions[, `Duration (in seconds)`)/60) + (2*`sd(Duration (in seconds)`/60)]
completions[, `Duration (in seconds)`)/60) + (2 * `sd(Duration (in seconds)`)/60)]
completions[, mean((`Duration (in seconds)`)/60) + (2 *(sd(`Duration (in seconds)`)/60))]
completions[, round(mean((`Duration (in seconds)`)/60) + (2 *(sd(`Duration (in seconds)`)/60)), 1)]
library(foreign)
library(data.table)
library(knitr)
library(cobalt)
library(stargazer)
library(sandwich)
library(car)
library(dplyr)
library(ggmap)
library(revgeo)
library(AER)
library(ggplot2)
library(expss)
library(grid)
library(gridExtra)
library(pander)
opts_knit$set()
options(digits=4)
knitr::opts_chunk$set(echo = TRUE)
d_respondents <- fread('datatable_clean_survey_responses_v2.dta')
get_robust_se <- function(model){
# Get robust SE for use in stargazer
vcov <- vcovHC(model,type = "HC1")
return(sqrt(diag(vcov)))
}
create_heatmap <- function(var1, var2) {
### Create a heatmap for a table of frequencies between two variables ###
df <- data.frame(table(var1,var2))
ggplot(df,aes(x=var1,y=var2)) +
geom_tile(aes(fill=Freq,color=Freq),show.legend=FALSE,alpha=.8) +
geom_text(aes(label=Freq)) +
theme(axis.text.x = element_text(angle = 90)) +
scale_fill_continuous(high = "darkslategray4", low = "powderblue")
}
#n survey responses > 30 mins., take outlier out for analysis but discuss below
outlier <- round(d_respondents[`Duration (in seconds)` > 60*30, `Duration (in seconds)`/60/60],1)
completions <- d_respondents[`Duration (in seconds)` < 60*30]
#95% of participants finished below this point in mins.
upper_cl <- completions[, round(mean((`Duration (in seconds)`)/60) + (2 *(sd(`Duration (in seconds)`)/60)), 1)]
#density plot of time completed by assignment group in mins.
ggplot(completions, aes(x=`Duration (in seconds)`/60, fill = as.factor(Assignment_Group), colour=as.factor(Assignment_Group))) +
geom_density(alpha = 0.35) +
xlim(0,60) +
ggtitle("Survey Duration by Assignment Group (sans Outlier)") +
labs(x = "Minutes") +
geom_vline(xintercept = upper_cl, linetype="dotted", color = "blue", size = 0.5) +
theme(plot.title = element_text(hjust = 0.5))
create_heatmap <- function(var1, var2) {
### Create a heatmap for a table of frequencies between two variables ###
df <- data.frame(table(var1,var2))
ggplot(df,aes(x=var1,y=var2)) +
geom_tile(aes(fill=Freq,color=Freq),show.legend=FALSE,alpha=.8) +
geom_text(aes(label=Freq)) +
theme(axis.text.x = element_text(angle = 90)) +
scale_fill_continuous(high = "darkslategray4", low = "powderblue")
}
# check balance between assignment groups
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(count = n())
# check balance between genders
gender_chiqq <- chisq.test(d_respondents[ , table(Assignment_Group, Gender)])
create_heatmap(var1 = d_respondents$Assignment_Group,var2 = d_respondents$Gender) +
xlab('Assignment Group') +
ylab('Gender') +
labs(title = 'Contingency table between gender and assignment group',
caption = paste0('Assuming gender distributions are the same among assignment groups, a chi-squared test for independence with ',
round(gender_chiqq$parameter,4),' \ndegrees of freedom ', 'yields p=',
round(gender_chiqq$p.value,4),
', suggesting that there is no relationship between gender and assignment groups at a \nsignificance level of 0.05.')) +
theme(plot.caption = element_text(hjust = 0))
# check balance between age ranges
age_chisq <- chisq.test(d_respondents[ , table(Assignment_Group, Age_Range)],simulate.p.value = TRUE)
create_heatmap(var1 = d_respondents$Assignment_Group,var2 = d_respondents$Age_Range) +
xlab('Assignment Group') +
ylab('Age Range') +
labs(title = 'Contingency table between age range and assignment group',
caption = paste0('Assuming age distributions are the same among assignment groups, a chi-squared test for independence with Monte \nCarlo simulation yields p=',
round(age_chisq$p.value,4),
', suggesting that there is no relationship between age and assignment groups at a \nsignificance level of 0.05.')) +
theme(plot.caption = element_text(hjust = 0))
#check balance between education levels
edu_chisq <- chisq.test(d_respondents[ , table(Assignment_Group, Education_Level)],simulate.p.value = TRUE)
create_heatmap(var1 = d_respondents$Assignment_Group,var2 = d_respondents$Education_Level) +
xlab('Assignment Group') +
ylab('Education Level') +
labs(title = 'Contingency table between education and assignment group',
caption = paste0('Assuming education distributions are the same among assignment groups, a chi-squared test for \nindependence with Monte Carlo simulation yields p=',
round(edu_chisq$p.value,4),
', suggesting that there is no relationship \nbetween education and assignment groups at a significance level of 0.05.')) +
theme(plot.caption = element_text(hjust = 0))
# check balance between US and non-US respondents
us_chisq <- chisq.test(d_respondents[ , table(Assignment_Group, US_Dummy)])
create_heatmap(var1 = d_respondents$Assignment_Group,var2 = d_respondents$US_Dummy) +
xlab('Assignment Group') +
ylab('Country') +
scale_y_discrete(breaks=c("0", "1"),
labels=c("Non-US", "United States")) +
labs(title = 'Contingency table between country and assignment group',
caption = paste0('Assuming country distributions are the same among assignment groups, a chi-squared test for independence with \n',
round(us_chisq$parameter,4),' degrees of freedom ', 'yields p=',
round(us_chisq$p.value,4),
', suggesting that there is no relationship between country and assignment \ngroups at a significance level of 0.05.')) +
theme(plot.caption = element_text(hjust = 0))
# does any treatment have an effect on task phase 2 score?
mod_task2_a <- d_respondents[, lm(TaskPhase2_Score ~ Treatment_Dummy)]
mod_task2_b <- d_respondents[, lm(TaskPhase2_Score ~ Treatment_Dummy +
TaskPhase1_Score +
as.factor(Gender) +
as.factor(Education_Level) +
as.factor(Age_Range))]
stargazer(mod_task2_a,
mod_task2_b,
se = list(get_robust_se(mod_task2_a),get_robust_se(mod_task2_b)),
omit = c("Education_Level","Age_Range"),
add.lines = list(c('Education Fixed Effects', 'No','Yes'),
c('Age Fixed Effects','No','Yes')),
header=FALSE,
type='latex')
#does the specific treatment group have an effect on task phase 2 score?
mod_task2_c <- d_respondents[, lm(TaskPhase2_Score ~ as.factor(Assignment_Group))]
mod_task2_d <- d_respondents[, lm(TaskPhase2_Score ~ as.factor(Assignment_Group) +
TaskPhase1_Score +
as.factor(Gender) +
as.factor(Education_Level) +
as.factor(Age_Range))]
#stargazer output
stargazer(mod_task2_c,
mod_task2_d,
se = list(get_robust_se(mod_task2_c),get_robust_se(mod_task2_d)),
omit = c("Education_Level","Age_Range"),
add.lines = list(c('Education Fixed Effects', 'No','Yes'),
c('Age Fixed Effects','No','Yes')),
header=FALSE,
type="latex")
pander(anova(mod_task2_b, mod_task2_d, test='F'),style='rmarkdown')
# test final task and any treatment
mod_task3_a <- d_respondents[, lm(TaskPhase3_Score ~ Treatment_Dummy)]
mod_task3_b <- d_respondents[, lm(TaskPhase3_Score ~ Treatment_Dummy +
TaskPhase1_Score +
as.factor(Gender) +
as.factor(Education_Level) +
as.factor(Age_Range))]
stargazer(mod_task3_a,
mod_task3_b,
se = list(get_robust_se(mod_task3_a),get_robust_se(mod_task3_b)),
omit = c("Education_Level","Age_Range"),
add.lines = list(c('Education Fixed Effects', 'No','Yes'),
c('Age Fixed Effects','No','Yes')),
header=FALSE,
type='latex')
# test final task and specific treatment
mod_task3_c <- d_respondents[, lm(TaskPhase3_Score ~ as.factor(Assignment_Group))]
mod_task3_d <- d_respondents[, lm(TaskPhase3_Score ~ as.factor(Assignment_Group) +
TaskPhase1_Score +
as.factor(Gender) +
as.factor(Education_Level) +
as.factor(Age_Range))]
stargazer(mod_task3_c,
mod_task3_d,
se = list(get_robust_se(mod_task3_c),get_robust_se(mod_task3_d)),
omit = c("Education_Level","Age_Range"),
add.lines = list(c('Education Fixed Effects', 'No','Yes'),
c('Age Fixed Effects','No','Yes')),
header=FALSE,
type='latex')
pander(anova(mod_task3_b, mod_task3_d, test='F'),style='rmarkdown')
d_respondents[, .N, by = .(Assignment_Group)]
d_respondents %>%
group_by(Assignment_Group) %>%
summarise(count = n())
